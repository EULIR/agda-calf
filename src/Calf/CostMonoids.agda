{-# OPTIONS --prop --without-K --rewriting #-}

-- Common cost monoids.

module Calf.CostMonoids where

open import Calf.CostMonoid
open import Data.Product
open import Function
open import Relation.Binary.PropositionalEquality

‚Ñï-CostMonoid : CostMonoid
‚Ñï-CostMonoid = record
  { ‚ÑÇ = ‚Ñï
  ; _+_ = _+_
  ; zero = zero
  ; _‚â§_ = _‚â§_
  ; isCostMonoid = record
    { isMonoid = +-0-isMonoid
    ; isPreorder = ‚â§-isPreorder
    ; isMonotone = record { ‚àô-mono-‚â§ = +-mono-‚â§ }
    }
  }
  where
    open import Data.Nat
    open import Data.Nat.Properties

‚Ñ§-CostMonoid : CostMonoid
‚Ñ§-CostMonoid = record
  { ‚ÑÇ = ‚Ñ§
  ; _+_ = _+_
  ; zero = 0‚Ñ§
  ; _‚â§_ = _‚â§_
  ; isCostMonoid = record
    { isMonoid = +-0-isMonoid
    ; isPreorder = ‚â§-isPreorder
    ; isMonotone = record { ‚àô-mono-‚â§ = +-mono-‚â§ }
    }
  }
  where
    open import Data.Integer
    open import Data.Integer.Properties

ResourceMonoid : CostMonoid
ResourceMonoid = record
  { ‚ÑÇ = ‚Ñï √ó ‚Ñï
  ; _+_ = _¬∑_
  ; zero = 0 , 0
  ; _‚â§_ = _‚â§·µ£_
  ; isCostMonoid = record
    { isMonoid = record
      { isSemigroup = record
        { isMagma = record
          { isEquivalence = isEquivalence
          ; ‚àô-cong = Œª { refl refl ‚Üí refl }
          }
        ; assoc = assoc
        }
      ; identity = identityÀ° , identity ≥
      }
    ; isPreorder = record
      { isEquivalence = isEquivalence
      ; reflexive = Œª { refl ‚Üí (‚â§-refl , ‚â§-refl) }
      ; trans = Œª (h‚ÇÅ , h‚ÇÇ) (h‚ÇÅ' , h‚ÇÇ') ‚Üí ‚â§-trans h‚ÇÅ h‚ÇÅ' , ‚â§-trans h‚ÇÇ' h‚ÇÇ
      }
    ; isMonotone = record { ‚àô-mono-‚â§ = ‚àô-mono-‚â§·µ£ }
    }
  }
  where
    open import Data.Nat
    open import Data.Nat.Properties

    open import Data.Bool using (false; true)

    open import Algebra.Definitions _‚â°_
    open import Relation.Nullary
    open import Relation.Binary

    _¬∑_ : ‚Ñï √ó ‚Ñï ‚Üí ‚Ñï √ó ‚Ñï ‚Üí ‚Ñï √ó ‚Ñï
    (p , p') ¬∑ (q , q') with p' ‚â§? q
    ... | no ¬¨h = p , q' + (p' ‚à∏ q)
    ... | yes h = p + (q ‚à∏ p') , q'

    _‚â§·µ£_ : ‚Ñï √ó ‚Ñï ‚Üí ‚Ñï √ó ‚Ñï ‚Üí Set
    (p , p') ‚â§·µ£ (q , q') = (p ‚â§ q) √ó (q' ‚â§ p')

    m‚â§n‚áím‚â§n+o : ‚àÄ {m n o} ‚Üí m ‚â§ n ‚Üí m ‚â§ n + o
    m‚â§n‚áím‚â§n+o {m} {n} {o} h =
      begin
        m
      ‚â°Àò‚ü® +-identity ≥ m ‚ü©
        m + 0
      ‚â§‚ü® +-mono-‚â§ h z‚â§n ‚ü©
        n + o
      ‚àé
        where open ‚â§-Reasoning

    assoc : Associative _¬∑_
    assoc (p , p') (q , q') (r , r') with q' ‚â§? r
    assoc (p , p') (q , q') (r , r') | no ¬¨h‚ÇÅ with p' ‚â§? q
    assoc (p , p') (q , q') (r , r') | no ¬¨h‚ÇÅ | no ¬¨h‚ÇÇ with q' + (p' ‚à∏ q) ‚â§? r
    assoc (p , p') (q , q') (r , r') | no ¬¨h‚ÇÅ | no ¬¨h‚ÇÇ | no ¬¨h‚ÇÉ =
      let h‚ÇÅ = ‚â∞‚áí‚â• ¬¨h‚ÇÅ in
      cong (p ,_)
        (begin
          r' + (q' + (p' ‚à∏ q) ‚à∏ r)
        ‚â°‚ü® cong (r' +_) (+-‚à∏-comm (p' ‚à∏ q) h‚ÇÅ) ‚ü©
          r' + ((q' ‚à∏ r) + (p' ‚à∏ q))
        ‚â°Àò‚ü® +-assoc r' (q' ‚à∏ r) (p' ‚à∏ q) ‚ü©
          r' + (q' ‚à∏ r) + (p' ‚à∏ q)
        ‚àé)
          where open ‚â°-Reasoning
    assoc (p , p') (q , q') (r , r') | no ¬¨h‚ÇÅ | no ¬¨h‚ÇÇ | yes h‚ÇÉ =
      let h‚ÇÅ = ‚â∞‚áí‚â• ¬¨h‚ÇÅ in
      cong‚ÇÇ _,_
        (begin
          p + (r ‚à∏ (q' + (p' ‚à∏ q)))
        ‚â°‚ü® cong (p +_) (subst (Œª n ‚Üí (r ‚à∏ n) ‚â° 0) (‚â§-antisym (m‚â§n‚áím‚â§n+o h‚ÇÅ) h‚ÇÉ) (n‚à∏n‚â°0 r)) ‚ü©
          p + 0
        ‚â°‚ü® +-identity ≥ p ‚ü©
          p
        ‚àé)
        (begin
          r'
        ‚â°Àò‚ü® +-identity ≥ r' ‚ü©
          r' + 0
        ‚â°Àò‚ü® cong (r' +_) (subst (Œª n ‚Üí (n ‚à∏ r) ‚â° 0) (‚â§-antisym (m‚â§n‚áím‚â§n+o h‚ÇÅ) h‚ÇÉ) (n‚à∏n‚â°0 r)) ‚ü©
          r' + (q' + (p' ‚à∏ q) ‚à∏ r)
        ‚â°‚ü® cong (r' +_) (+-‚à∏-comm (p' ‚à∏ q) h‚ÇÅ) ‚ü©
          r' + ((q' ‚à∏ r) + (p' ‚à∏ q))
        ‚â°Àò‚ü® +-assoc r' (q' ‚à∏ r) (p' ‚à∏ q) ‚ü©
          r' + (q' ‚à∏ r) + (p' ‚à∏ q)
        ‚àé)
          where open ‚â°-Reasoning
    assoc (p , p') (q , q') (r , r') | no ¬¨h‚ÇÅ | yes h‚ÇÇ = {!   !}
    assoc (p , p') (q , q') (r , r') | yes h‚ÇÅ = {!   !}

    identityÀ° : LeftIdentity (0 , 0) _¬∑_
    identityÀ° (q , q') = cong‚ÇÇ _,_ (+-identityÀ° q) (+-identityÀ° q')

    identity ≥ : RightIdentity (0 , 0) _¬∑_
    identity ≥ (q , q') with q' ‚â§? 0
    ... | no ¬¨h = refl
    ... | yes z‚â§n = cong‚ÇÇ _,_ (+-identity ≥ q) refl

    ‚àô-mono-‚â§·µ£ : _¬∑_ Preserves‚ÇÇ _‚â§·µ£_ ‚ü∂ _‚â§·µ£_ ‚ü∂ _‚â§·µ£_
    ‚àô-mono-‚â§·µ£ {p , p'} {q , q'} {r , r'} {s , s'} (h‚ÇÅ , h‚ÇÇ) (h‚ÇÅ' , h‚ÇÇ') with p' ‚â§? r | q' ‚â§? s
    ... | no ¬¨p‚ÇÅ | no ¬¨p‚ÇÇ = h‚ÇÅ , +-mono-‚â§ h‚ÇÇ' (‚à∏-mono h‚ÇÇ h‚ÇÅ')
    ... | no ¬¨p‚ÇÅ | yes p‚ÇÇ =
      let p‚ÇÅ = ‚â∞‚áí‚â• ¬¨p‚ÇÅ in
      (
        begin
          p
        ‚â§‚ü® h‚ÇÅ ‚ü©
          q
        ‚â°Àò‚ü® +-identity ≥ q ‚ü©
          q + 0
        ‚â°Àò‚ü® cong (q +_) (m‚â§n‚áím‚à∏n‚â°0 p‚ÇÅ) ‚ü©
          q + (r ‚à∏ p')
        ‚â§‚ü® +-mono ≥-‚â§ q (‚à∏-mono h‚ÇÅ' h‚ÇÇ) ‚ü©
          q + (s ‚à∏ q')
        ‚àé
      ) , (
        begin
          s'
        ‚â§‚ü® h‚ÇÇ' ‚ü©
          r'
        ‚â°Àò‚ü® +-identity ≥ r' ‚ü©
          r' + 0
        ‚â°Àò‚ü® cong (r' +_) (m‚â§n‚áím‚à∏n‚â°0 p‚ÇÇ) ‚ü©
          r' + (q' ‚à∏ s)
        ‚â§‚ü® +-mono ≥-‚â§ r' (‚à∏-mono h‚ÇÇ h‚ÇÅ') ‚ü©
          r' + (p' ‚à∏ r)
        ‚àé
      )
        where open ‚â§-Reasoning
    ... | yes p‚ÇÅ | no ¬¨p‚ÇÇ =
      let p‚ÇÇ = ‚â∞‚áí‚â• ¬¨p‚ÇÇ in
      (
        begin
          p + (r ‚à∏ p')
        ‚â§‚ü® +-mono ≥-‚â§ p (‚à∏-mono h‚ÇÅ' h‚ÇÇ) ‚ü©
          p + (s ‚à∏ q')
        ‚â°‚ü® cong (p +_) (m‚â§n‚áím‚à∏n‚â°0 p‚ÇÇ) ‚ü©
          p + 0
        ‚â°‚ü® +-identity ≥ p ‚ü©
          p
        ‚â§‚ü® h‚ÇÅ ‚ü©
          q
        ‚àé
      ) , (
        begin
          s' + (q' ‚à∏ s)
        ‚â§‚ü® +-mono ≥-‚â§ s' (‚à∏-mono h‚ÇÇ h‚ÇÅ') ‚ü©
          s' + (p' ‚à∏ r)
        ‚â°‚ü® cong (s' +_) (m‚â§n‚áím‚à∏n‚â°0 p‚ÇÅ) ‚ü©
          s' + 0
        ‚â°‚ü® +-identity ≥ s' ‚ü©
          s'
        ‚â§‚ü® h‚ÇÇ' ‚ü©
          r'
        ‚àé
      )
        where open ‚â§-Reasoning
    ... | yes p‚ÇÅ | yes p‚ÇÇ = +-mono-‚â§ h‚ÇÅ (‚à∏-mono h‚ÇÅ' h‚ÇÇ) , h‚ÇÇ'

‚Ñï-Work-ParCostMonoid : ParCostMonoid
‚Ñï-Work-ParCostMonoid = record
  { ‚ÑÇ = ‚Ñï
  ; _‚äï_ = _+_
  ; ùüò = 0
  ; _‚äó_ = _+_
  ; ùüô = 0
  ; _‚â§_ = _‚â§_
  ; isParCostMonoid = record
    { isMonoid = +-0-isMonoid
    ; isCommutativeMonoid = +-0-isCommutativeMonoid
    ; isPreorder = ‚â§-isPreorder
    ; isMonotone-‚äï = record { ‚àô-mono-‚â§ = +-mono-‚â§ }
    ; isMonotone-‚äó = record { ‚àô-mono-‚â§ = +-mono-‚â§ }
    }
  }
  where
    open import Data.Nat
    open import Data.Nat.Properties

‚Ñï-Span-ParCostMonoid : ParCostMonoid
‚Ñï-Span-ParCostMonoid = record
  { ‚ÑÇ = ‚Ñï
  ; _‚äï_ = _+_
  ; ùüò = 0
  ; _‚äó_ = _‚äî_
  ; ùüô = 0
  ; _‚â§_ = _‚â§_
  ; isParCostMonoid = record
    { isMonoid = +-0-isMonoid
    ; isCommutativeMonoid = ‚äî-0-isCommutativeMonoid
    ; isPreorder = ‚â§-isPreorder
    ; isMonotone-‚äï = record { ‚àô-mono-‚â§ = +-mono-‚â§ }
    ; isMonotone-‚äó = record { ‚àô-mono-‚â§ = ‚äî-mono-‚â§ }
    }
  }
  where
    open import Data.Nat
    open import Data.Nat.Properties

combineParCostMonoids : ParCostMonoid ‚Üí ParCostMonoid ‚Üí ParCostMonoid
combineParCostMonoids pcm‚ÇÅ pcm‚ÇÇ = record
  { ‚ÑÇ = ‚ÑÇ pcm‚ÇÅ √ó ‚ÑÇ pcm‚ÇÇ
  ; _‚äï_ = Œª (a‚ÇÅ , a‚ÇÇ) (b‚ÇÅ , b‚ÇÇ) ‚Üí _‚äï_ pcm‚ÇÅ a‚ÇÅ b‚ÇÅ , _‚äï_ pcm‚ÇÇ a‚ÇÇ b‚ÇÇ
  ; ùüò = ùüò pcm‚ÇÅ , ùüò pcm‚ÇÇ
  ; _‚äó_ = Œª (a‚ÇÅ , a‚ÇÇ) (b‚ÇÅ , b‚ÇÇ) ‚Üí _‚äó_ pcm‚ÇÅ a‚ÇÅ b‚ÇÅ , _‚äó_ pcm‚ÇÇ a‚ÇÇ b‚ÇÇ
  ; ùüô = ùüô pcm‚ÇÅ , ùüô pcm‚ÇÇ
  ; _‚â§_ = Œª (a‚ÇÅ , a‚ÇÇ) (b‚ÇÅ , b‚ÇÇ) ‚Üí _‚â§_ pcm‚ÇÅ a‚ÇÅ b‚ÇÅ √ó _‚â§_ pcm‚ÇÇ a‚ÇÇ b‚ÇÇ
  ; isParCostMonoid = record
    { isMonoid = record
      { isSemigroup = record
        { isMagma = record
          { isEquivalence = isEquivalence
          ; ‚àô-cong = Œª h‚ÇÅ h‚ÇÇ ‚Üí
              cong‚ÇÇ _,_
                (cong‚ÇÇ (_‚äï_ pcm‚ÇÅ) (cong proj‚ÇÅ h‚ÇÅ) (cong proj‚ÇÅ h‚ÇÇ))
                (cong‚ÇÇ (_‚äï_ pcm‚ÇÇ) (cong proj‚ÇÇ h‚ÇÅ) (cong proj‚ÇÇ h‚ÇÇ))
          }
        ; assoc = Œª (a‚ÇÅ , a‚ÇÇ) (b‚ÇÅ , b‚ÇÇ) (c‚ÇÅ , c‚ÇÇ) ‚Üí cong‚ÇÇ _,_ (‚äï-assoc pcm‚ÇÅ a‚ÇÅ b‚ÇÅ c‚ÇÅ) (‚äï-assoc pcm‚ÇÇ a‚ÇÇ b‚ÇÇ c‚ÇÇ)
        }
      ; identity =
        (Œª (a‚ÇÅ , a‚ÇÇ) ‚Üí cong‚ÇÇ _,_ (‚äï-identityÀ° pcm‚ÇÅ a‚ÇÅ) (‚äï-identityÀ° pcm‚ÇÇ a‚ÇÇ)) ,
        (Œª (a‚ÇÅ , a‚ÇÇ) ‚Üí cong‚ÇÇ _,_ (‚äï-identity ≥ pcm‚ÇÅ a‚ÇÅ) (‚äï-identity ≥ pcm‚ÇÇ a‚ÇÇ))
      }
    ; isCommutativeMonoid = record
      { isMonoid = record
        { isSemigroup = record
          { isMagma = record
            { isEquivalence = isEquivalence
            ; ‚àô-cong = Œª h‚ÇÅ h‚ÇÇ ‚Üí
                cong‚ÇÇ _,_
                  (cong‚ÇÇ (_‚äó_ pcm‚ÇÅ) (cong proj‚ÇÅ h‚ÇÅ) (cong proj‚ÇÅ h‚ÇÇ))
                  (cong‚ÇÇ (_‚äó_ pcm‚ÇÇ) (cong proj‚ÇÇ h‚ÇÅ) (cong proj‚ÇÇ h‚ÇÇ))
            }
          ; assoc = Œª (a‚ÇÅ , a‚ÇÇ) (b‚ÇÅ , b‚ÇÇ) (c‚ÇÅ , c‚ÇÇ) ‚Üí cong‚ÇÇ _,_ (‚äó-assoc pcm‚ÇÅ a‚ÇÅ b‚ÇÅ c‚ÇÅ) (‚äó-assoc pcm‚ÇÇ a‚ÇÇ b‚ÇÇ c‚ÇÇ)
          }
        ; identity =
          (Œª (a‚ÇÅ , a‚ÇÇ) ‚Üí cong‚ÇÇ _,_ (‚äó-identityÀ° pcm‚ÇÅ a‚ÇÅ) (‚äó-identityÀ° pcm‚ÇÇ a‚ÇÇ)) ,
          (Œª (a‚ÇÅ , a‚ÇÇ) ‚Üí cong‚ÇÇ _,_ (‚äó-identity ≥ pcm‚ÇÅ a‚ÇÅ) (‚äó-identity ≥ pcm‚ÇÇ a‚ÇÇ))
        }
      ; comm = Œª (a‚ÇÅ , a‚ÇÇ) (b‚ÇÅ , b‚ÇÇ) ‚Üí cong‚ÇÇ _,_ (‚äó-comm pcm‚ÇÅ a‚ÇÅ b‚ÇÅ) (‚äó-comm pcm‚ÇÇ a‚ÇÇ b‚ÇÇ)
      }
    ; isPreorder = record
      { isEquivalence = isEquivalence
      ; reflexive = Œª { refl ‚Üí ‚â§-refl pcm‚ÇÅ , ‚â§-refl pcm‚ÇÇ }
      ; trans = Œª (h‚ÇÅ , h‚ÇÇ) (h‚ÇÅ' , h‚ÇÇ') ‚Üí ‚â§-trans pcm‚ÇÅ h‚ÇÅ h‚ÇÅ' , ‚â§-trans pcm‚ÇÇ h‚ÇÇ h‚ÇÇ'
      }
    ; isMonotone-‚äï = record
      { ‚àô-mono-‚â§ = Œª (h‚ÇÅ , h‚ÇÇ) (h‚ÇÅ' , h‚ÇÇ') ‚Üí ‚äï-mono-‚â§ pcm‚ÇÅ h‚ÇÅ h‚ÇÅ' , ‚äï-mono-‚â§ pcm‚ÇÇ h‚ÇÇ h‚ÇÇ'
      }
    ; isMonotone-‚äó = record
      { ‚àô-mono-‚â§ = Œª (h‚ÇÅ , h‚ÇÇ) (h‚ÇÅ' , h‚ÇÇ') ‚Üí ‚äó-mono-‚â§ pcm‚ÇÅ h‚ÇÅ h‚ÇÅ' , ‚äó-mono-‚â§ pcm‚ÇÇ h‚ÇÇ h‚ÇÇ'
      }
    }
  }
  where open ParCostMonoid

‚Ñï¬≤-ParCostMonoid : ParCostMonoid
‚Ñï¬≤-ParCostMonoid = combineParCostMonoids ‚Ñï-Work-ParCostMonoid ‚Ñï-Span-ParCostMonoid
