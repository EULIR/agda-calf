{-# OPTIONS --prop --without-K --rewriting #-}

-- Common cost monoids.

module Calf.CostMonoids where

open import Calf.CostMonoid
open import Data.Product
open import Function
open import Relation.Binary.PropositionalEquality

‚Ñï-CostMonoid : CostMonoid
‚Ñï-CostMonoid = record
  { ‚ÑÇ = ‚Ñï
  ; _+_ = _+_
  ; zero = zero
  ; _‚â§_ = _‚â§_
  ; isCostMonoid = record
    { isMonoid = +-0-isMonoid
    ; isCancellative = record { ‚àô-cancel-‚â° = +-cancel-‚â° }
    ; isPreorder = ‚â§-isPreorder
    ; isMonotone = record { ‚àô-mono-‚â§ = +-mono-‚â§ }
    }
  }
  where
    open import Data.Nat
    open import Data.Nat.Properties

‚Ñ§-CostMonoid : CostMonoid
‚Ñ§-CostMonoid = record
  { ‚ÑÇ = ‚Ñ§
  ; _+_ = _+_
  ; zero = 0‚Ñ§
  ; _‚â§_ = _‚â§_
  ; isCostMonoid = record
    { isMonoid = +-0-isMonoid
    ; isCancellative = record { ‚àô-cancel-‚â° = +-cancelÀ°-‚â° , +-cancel ≥-‚â° }
    ; isPreorder = ‚â§-isPreorder
    ; isMonotone = record { ‚àô-mono-‚â§ = +-mono-‚â§ }
    }
  }
  where
    open import Data.Integer
    open import Data.Integer.Properties

    open import Data.Nat using (‚Ñï)
    import Data.Nat.Properties as N

    open import Algebra.Definitions _‚â°_

    ‚äñ-cancelÀ°-‚â° : ‚àÄ x {y z} ‚Üí (x ‚äñ y) ‚âà (x ‚äñ z) ‚Üí y ‚âà z
    ‚äñ-cancelÀ°-‚â° = {!   !}

    ‚äñ-cancel ≥-‚â° : ‚àÄ {x} y z ‚Üí (y ‚äñ x) ‚âà (z ‚äñ x) ‚Üí y ‚âà z
    ‚äñ-cancel ≥-‚â° = {!   !}

    +-cancelÀ°-‚â° : LeftCancellative _+_
    +-cancelÀ°-‚â° (+_ n) {+_ n‚ÇÅ} {+_ n‚ÇÇ} h = cong +_ (N.+-cancelÀ°-‚â° n (+-injective h))
    +-cancelÀ°-‚â° (+_ n) {+_ n‚ÇÅ} { -[1+_] n‚ÇÇ} h with m‚äñ1+n<m n n‚ÇÅ
    ... | foo = {!   !}
    +-cancelÀ°-‚â° (+_ n) { -[1+_] n‚ÇÅ} {+_ n‚ÇÇ} h = {!   !}
    +-cancelÀ°-‚â° (+_ n) { -[1+_] n‚ÇÅ} { -[1+_] n‚ÇÇ} h = cong -[1+_] (N.suc-injective (‚äñ-cancelÀ°-‚â° n h))
    +-cancelÀ°-‚â° (-[1+_] n) {+_ n‚ÇÅ} {+_ n‚ÇÇ} h = cong +_ (‚äñ-cancel ≥-‚â° {‚Ñï.suc n} n‚ÇÅ n‚ÇÇ h)
    +-cancelÀ°-‚â° (-[1+_] n) {+_ n‚ÇÅ} { -[1+_] n‚ÇÇ} h = {!   !}
    +-cancelÀ°-‚â° (-[1+_] n) { -[1+_] n‚ÇÅ} {+_ n‚ÇÇ} h = {!   !}
    +-cancelÀ°-‚â° (-[1+_] n) { -[1+_] n‚ÇÅ} { -[1+_] n‚ÇÇ} h = cong -[1+_] (N.+-cancelÀ°-‚â° n (N.suc-injective (-[1+-injective h)))

    +-cancel ≥-‚â° : RightCancellative _+_
    +-cancel ≥-‚â° {x} y z h = +-cancelÀ°-‚â° x $
      begin
        x + y
      ‚â°‚ü® +-comm x y ‚ü©
        y + x
      ‚â°‚ü® h ‚ü©
        z + x
      ‚â°Àò‚ü® +-comm x z ‚ü©
        x + z
      ‚àé
        where open ‚â°-Reasoning

‚Ñï-Work-ParCostMonoid : ParCostMonoid
‚Ñï-Work-ParCostMonoid = record
  { ‚ÑÇ = ‚Ñï
  ; _‚äï_ = _+_
  ; ùüò = 0
  ; _‚äó_ = _+_
  ; ùüô = 0
  ; _‚â§_ = _‚â§_
  ; isParCostMonoid = record
    { isMonoid = +-0-isMonoid
    ; isCommutativeMonoid = +-0-isCommutativeMonoid
    ; isCancellative = record { ‚àô-cancel-‚â° = +-cancel-‚â° }
    ; isPreorder = ‚â§-isPreorder
    ; isMonotone-‚äï = record { ‚àô-mono-‚â§ = +-mono-‚â§ }
    ; isMonotone-‚äó = record { ‚àô-mono-‚â§ = +-mono-‚â§ }
    }
  }
  where
    open import Data.Nat
    open import Data.Nat.Properties

‚Ñï-Span-ParCostMonoid : ParCostMonoid
‚Ñï-Span-ParCostMonoid = record
  { ‚ÑÇ = ‚Ñï
  ; _‚äï_ = _+_
  ; ùüò = 0
  ; _‚äó_ = _‚äî_
  ; ùüô = 0
  ; _‚â§_ = _‚â§_
  ; isParCostMonoid = record
    { isMonoid = +-0-isMonoid
    ; isCommutativeMonoid = ‚äî-0-isCommutativeMonoid
    ; isPreorder = ‚â§-isPreorder
    ; isCancellative = record { ‚àô-cancel-‚â° = +-cancel-‚â° }
    ; isMonotone-‚äï = record { ‚àô-mono-‚â§ = +-mono-‚â§ }
    ; isMonotone-‚äó = record { ‚àô-mono-‚â§ = ‚äî-mono-‚â§ }
    }
  }
  where
    open import Data.Nat
    open import Data.Nat.Properties

combineParCostMonoids : ParCostMonoid ‚Üí ParCostMonoid ‚Üí ParCostMonoid
combineParCostMonoids pcm‚ÇÅ pcm‚ÇÇ = record
  { ‚ÑÇ = ‚ÑÇ pcm‚ÇÅ √ó ‚ÑÇ pcm‚ÇÇ
  ; _‚äï_ = Œª (a‚ÇÅ , a‚ÇÇ) (b‚ÇÅ , b‚ÇÇ) ‚Üí _‚äï_ pcm‚ÇÅ a‚ÇÅ b‚ÇÅ , _‚äï_ pcm‚ÇÇ a‚ÇÇ b‚ÇÇ
  ; ùüò = ùüò pcm‚ÇÅ , ùüò pcm‚ÇÇ
  ; _‚äó_ = Œª (a‚ÇÅ , a‚ÇÇ) (b‚ÇÅ , b‚ÇÇ) ‚Üí _‚äó_ pcm‚ÇÅ a‚ÇÅ b‚ÇÅ , _‚äó_ pcm‚ÇÇ a‚ÇÇ b‚ÇÇ
  ; ùüô = ùüô pcm‚ÇÅ , ùüô pcm‚ÇÇ
  ; _‚â§_ = Œª (a‚ÇÅ , a‚ÇÇ) (b‚ÇÅ , b‚ÇÇ) ‚Üí _‚â§_ pcm‚ÇÅ a‚ÇÅ b‚ÇÅ √ó _‚â§_ pcm‚ÇÇ a‚ÇÇ b‚ÇÇ
  ; isParCostMonoid = record
    { isMonoid = record
      { isSemigroup = record
        { isMagma = record
          { isEquivalence = isEquivalence
          ; ‚àô-cong = Œª h‚ÇÅ h‚ÇÇ ‚Üí
              cong‚ÇÇ _,_
                (cong‚ÇÇ (_‚äï_ pcm‚ÇÅ) (cong proj‚ÇÅ h‚ÇÅ) (cong proj‚ÇÅ h‚ÇÇ))
                (cong‚ÇÇ (_‚äï_ pcm‚ÇÇ) (cong proj‚ÇÇ h‚ÇÅ) (cong proj‚ÇÇ h‚ÇÇ))
          }
        ; assoc = Œª (a‚ÇÅ , a‚ÇÇ) (b‚ÇÅ , b‚ÇÇ) (c‚ÇÅ , c‚ÇÇ) ‚Üí cong‚ÇÇ _,_ (‚äï-assoc pcm‚ÇÅ a‚ÇÅ b‚ÇÅ c‚ÇÅ) (‚äï-assoc pcm‚ÇÇ a‚ÇÇ b‚ÇÇ c‚ÇÇ)
        }
      ; identity =
        (Œª (a‚ÇÅ , a‚ÇÇ) ‚Üí cong‚ÇÇ _,_ (‚äï-identityÀ° pcm‚ÇÅ a‚ÇÅ) (‚äï-identityÀ° pcm‚ÇÇ a‚ÇÇ)) ,
        (Œª (a‚ÇÅ , a‚ÇÇ) ‚Üí cong‚ÇÇ _,_ (‚äï-identity ≥ pcm‚ÇÅ a‚ÇÅ) (‚äï-identity ≥ pcm‚ÇÇ a‚ÇÇ))
      }
    ; isCommutativeMonoid = record
      { isMonoid = record
        { isSemigroup = record
          { isMagma = record
            { isEquivalence = isEquivalence
            ; ‚àô-cong = Œª h‚ÇÅ h‚ÇÇ ‚Üí
                cong‚ÇÇ _,_
                  (cong‚ÇÇ (_‚äó_ pcm‚ÇÅ) (cong proj‚ÇÅ h‚ÇÅ) (cong proj‚ÇÅ h‚ÇÇ))
                  (cong‚ÇÇ (_‚äó_ pcm‚ÇÇ) (cong proj‚ÇÇ h‚ÇÅ) (cong proj‚ÇÇ h‚ÇÇ))
            }
          ; assoc = Œª (a‚ÇÅ , a‚ÇÇ) (b‚ÇÅ , b‚ÇÇ) (c‚ÇÅ , c‚ÇÇ) ‚Üí cong‚ÇÇ _,_ (‚äó-assoc pcm‚ÇÅ a‚ÇÅ b‚ÇÅ c‚ÇÅ) (‚äó-assoc pcm‚ÇÇ a‚ÇÇ b‚ÇÇ c‚ÇÇ)
          }
        ; identity =
          (Œª (a‚ÇÅ , a‚ÇÇ) ‚Üí cong‚ÇÇ _,_ (‚äó-identityÀ° pcm‚ÇÅ a‚ÇÅ) (‚äó-identityÀ° pcm‚ÇÇ a‚ÇÇ)) ,
          (Œª (a‚ÇÅ , a‚ÇÇ) ‚Üí cong‚ÇÇ _,_ (‚äó-identity ≥ pcm‚ÇÅ a‚ÇÅ) (‚äó-identity ≥ pcm‚ÇÇ a‚ÇÇ))
        }
      ; comm = Œª (a‚ÇÅ , a‚ÇÇ) (b‚ÇÅ , b‚ÇÇ) ‚Üí cong‚ÇÇ _,_ (‚äó-comm pcm‚ÇÅ a‚ÇÅ b‚ÇÅ) (‚äó-comm pcm‚ÇÇ a‚ÇÇ b‚ÇÇ)
      }
    ; isCancellative = record
      { ‚àô-cancel-‚â° =
        (Œª (x‚ÇÅ , x‚ÇÇ)           h ‚Üí cong‚ÇÇ _,_ (‚äï-cancelÀ°-‚â° pcm‚ÇÅ x‚ÇÅ    (cong proj‚ÇÅ h)) (‚äï-cancelÀ°-‚â° pcm‚ÇÇ x‚ÇÇ    (cong proj‚ÇÇ h))) ,
        (Œª (y‚ÇÅ , y‚ÇÇ) (z‚ÇÅ , z‚ÇÇ) h ‚Üí cong‚ÇÇ _,_ (‚äï-cancel ≥-‚â° pcm‚ÇÅ y‚ÇÅ z‚ÇÅ (cong proj‚ÇÅ h)) (‚äï-cancel ≥-‚â° pcm‚ÇÇ y‚ÇÇ z‚ÇÇ (cong proj‚ÇÇ h)))
      }
    ; isPreorder = record
      { isEquivalence = isEquivalence
      ; reflexive = Œª { refl ‚Üí ‚â§-refl pcm‚ÇÅ , ‚â§-refl pcm‚ÇÇ }
      ; trans = Œª (h‚ÇÅ , h‚ÇÇ) (h‚ÇÅ' , h‚ÇÇ') ‚Üí ‚â§-trans pcm‚ÇÅ h‚ÇÅ h‚ÇÅ' , ‚â§-trans pcm‚ÇÇ h‚ÇÇ h‚ÇÇ'
      }
    ; isMonotone-‚äï = record
      { ‚àô-mono-‚â§ = Œª (h‚ÇÅ , h‚ÇÇ) (h‚ÇÅ' , h‚ÇÇ') ‚Üí ‚äï-mono-‚â§ pcm‚ÇÅ h‚ÇÅ h‚ÇÅ' , ‚äï-mono-‚â§ pcm‚ÇÇ h‚ÇÇ h‚ÇÇ'
      }
    ; isMonotone-‚äó = record
      { ‚àô-mono-‚â§ = Œª (h‚ÇÅ , h‚ÇÇ) (h‚ÇÅ' , h‚ÇÇ') ‚Üí ‚äó-mono-‚â§ pcm‚ÇÅ h‚ÇÅ h‚ÇÅ' , ‚äó-mono-‚â§ pcm‚ÇÇ h‚ÇÇ h‚ÇÇ'
      }
    }
  }
  where open ParCostMonoid

‚Ñï¬≤-ParCostMonoid : ParCostMonoid
‚Ñï¬≤-ParCostMonoid = combineParCostMonoids ‚Ñï-Work-ParCostMonoid ‚Ñï-Span-ParCostMonoid
