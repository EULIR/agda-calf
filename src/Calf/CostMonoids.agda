{-# OPTIONS --prop --without-K --rewriting #-}

-- Common cost monoids.

module Calf.CostMonoids where

open import Calf.CostMonoid
open import Data.Product

‚Ñï-CostMonoid : CostMonoid
‚Ñï-CostMonoid = record
  { ‚ÑÇ = ‚Ñï
  ; _+_ = _+_
  ; zero = zero
  ; _‚â§_ = _‚â§_
  ; isCostMonoid = record
    { isMonoid = +-0-isMonoid
    ; isOrderPreserving = record
      { isTotalPreorder = ‚â§-isTotalPreorder
      ; z‚â§c = z‚â§n
      ; ‚àô-mono-‚â§ = +-mono-‚â§
      }
    } 
  }
  where
    open import Data.Nat
    open import Data.Nat.Properties
    open import Relation.Binary.PropositionalEquality

‚Ñï¬≤-ParCostMonoid : ParCostMonoid
‚Ñï¬≤-ParCostMonoid = record
  { ‚ÑÇ = ‚Ñï √ó ‚Ñï
  ; _‚äï_ = Œª (w‚ÇÅ , s‚ÇÅ) (w‚ÇÇ , s‚ÇÇ) ‚Üí (w‚ÇÅ + w‚ÇÇ) , (s‚ÇÅ + s‚ÇÇ)
  ; ùüò = zero , zero
  ; _‚äó_ = Œª (w‚ÇÅ , s‚ÇÅ) (w‚ÇÇ , s‚ÇÇ) ‚Üí (w‚ÇÅ + w‚ÇÇ) , (s‚ÇÅ ‚äî s‚ÇÇ)
  ; ùüô = zero , zero
  ; _‚â§‚Çä_ = Œª (w‚ÇÅ , _) (w‚ÇÇ , _) ‚Üí w‚ÇÅ ‚â§ w‚ÇÇ
  ; _‚â§‚Çì_ = Œª (_ , s‚ÇÅ) (_ , s‚ÇÇ) ‚Üí s‚ÇÅ ‚â§ s‚ÇÇ
  ; isParCostMonoid = record
    { isMonoid = record
      { isSemigroup = record
        { isMagma = record
          { isEquivalence = isEquivalence
          ; ‚àô-cong = Œª h‚ÇÅ h‚ÇÇ ‚Üí
              cong‚ÇÇ _,_
                (cong‚ÇÇ _+_ (cong proj‚ÇÅ h‚ÇÅ) (cong proj‚ÇÅ h‚ÇÇ))
                (cong‚ÇÇ _+_ (cong proj‚ÇÇ h‚ÇÅ) (cong proj‚ÇÇ h‚ÇÇ))
          }
        ; assoc = Œª (w‚ÇÅ , s‚ÇÅ) (w‚ÇÇ , s‚ÇÇ) (w‚ÇÉ , s‚ÇÉ) ‚Üí cong‚ÇÇ _,_ (+-assoc w‚ÇÅ w‚ÇÇ w‚ÇÉ) (+-assoc s‚ÇÅ s‚ÇÇ s‚ÇÉ)
        }
      ; identity =
          (Œª (w , s) ‚Üí cong‚ÇÇ _,_ (+-identityÀ° w) (+-identityÀ° s)) ,
          (Œª (w , s) ‚Üí cong‚ÇÇ _,_ (+-identity ≥ w) (+-identity ≥ s))
      }
    ; isCommutativeMonoid = record
      { isMonoid = record
        { isSemigroup = record
          { isMagma = record
            { isEquivalence = isEquivalence
            ; ‚àô-cong = Œª h‚ÇÅ h‚ÇÇ ‚Üí
                cong‚ÇÇ _,_
                  (cong‚ÇÇ _+_ (cong proj‚ÇÅ h‚ÇÅ) (cong proj‚ÇÅ h‚ÇÇ))
                  (cong‚ÇÇ _‚äî_ (cong proj‚ÇÇ h‚ÇÅ) (cong proj‚ÇÇ h‚ÇÇ))
            }
          ; assoc = Œª (w‚ÇÅ , s‚ÇÅ) (w‚ÇÇ , s‚ÇÇ) (w‚ÇÉ , s‚ÇÉ) ‚Üí cong‚ÇÇ _,_ (+-assoc w‚ÇÅ w‚ÇÇ w‚ÇÉ) (‚äî-assoc s‚ÇÅ s‚ÇÇ s‚ÇÉ)
          }
        ; identity =
            (Œª (w , s) ‚Üí cong‚ÇÇ _,_ (+-identityÀ° w) (‚äî-identityÀ° s)) ,
            (Œª (w , s) ‚Üí cong‚ÇÇ _,_ (+-identity ≥ w) (‚äî-identity ≥ s))
        }
        ; comm = Œª (w‚ÇÅ , s‚ÇÅ) (w‚ÇÇ , s‚ÇÇ) ‚Üí cong‚ÇÇ _,_ (+-comm w‚ÇÅ w‚ÇÇ) (‚äî-comm s‚ÇÅ s‚ÇÇ)
      }
    ; isOrderPreserving‚Çä = record
      { isTotalPreorder = record
        { isPreorder = record
          { isEquivalence = isEquivalence
          ; reflexive = Œª { refl ‚Üí ‚â§-refl }
          ; trans = ‚â§-trans
          }
        ; total = Œª (w‚ÇÅ , _) (w‚ÇÇ , _) ‚Üí ‚â§-total w‚ÇÅ w‚ÇÇ
        }
      ; z‚â§c = z‚â§n
      ; ‚àô-mono-‚â§ = +-mono-‚â§
      }
    ; isOrderPreserving‚Çì = record
      { isTotalPreorder = record
        { isPreorder = record
          { isEquivalence = isEquivalence
          ; reflexive = Œª { refl ‚Üí ‚â§-refl }
          ; trans = ‚â§-trans
          }
        ; total = Œª (_ , s‚ÇÅ) (_ , s‚ÇÇ) ‚Üí ‚â§-total s‚ÇÅ s‚ÇÇ
        }
      ; z‚â§c = z‚â§n
      ; ‚àô-mono-‚â§ = +-mono-‚â§
      }
    ; ‚äó-mono-‚â§‚Çì = ‚äî-mono-‚â§
    }
  }
  where
    open import Data.Nat
    open import Data.Nat.Properties
    open import Relation.Binary.PropositionalEquality
