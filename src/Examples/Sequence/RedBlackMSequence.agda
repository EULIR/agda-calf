{-# OPTIONS --prop --rewriting #-}

module Examples.Sequence.RedBlackMSequence where

open import Calf.CostMonoid
open import Calf.CostMonoids using (‚Ñï-CostMonoid)

costMonoid = ‚Ñï-CostMonoid
open CostMonoid costMonoid renaming (zero to ùüò; _+_ to _‚äï_)

open import Calf costMonoid
open import Calf.Types.Nat
open import Calf.Types.List
open import Calf.Types.Product
open import Calf.Types.Sum
open import Calf.Types.Bounded costMonoid

open import Data.Nat as Nat using (_+_; _*_; _<_; _>_; _‚â§·µá_; _<·µá_; ‚åä_/2‚åã; _‚â°·µá_; _‚â•_; _‚à∏_)
import Data.Nat.Properties as Nat
open import Data.Nat.Logarithm
open import Relation.Binary.PropositionalEquality as Eq using (_‚â°_; refl; _‚â¢_; module ‚â°-Reasoning; ‚â¢-sym)


open import Examples.Sequence.MSequence
open import Examples.Sequence.RedBlackTree


RedBlackMSequence : MSequence
RedBlackMSequence =
  record
    { seq = rbt
    ; empty = ret ‚ü™ leaf ‚ü´
    ; join = join
    ; rec = Œª {A} {X} ‚Üí rec {A} {X}
    }
  where
    record RBT (A : tp pos) : Set where
      pattern
      constructor ‚ü™_‚ü´
      field
        {y} : val color
        {n} : val nat
        {l} : val (list A)
        t : val (irbt A y n l)
    rbt : (A : tp pos) ‚Üí tp pos
    rbt A = U (meta (RBT A))

    join : cmp (Œ† (rbt A) Œª _ ‚Üí Œ† A Œª _ ‚Üí Œ† (rbt A) Œª _ ‚Üí F (rbt A))
    join {A} t‚ÇÅ a t‚ÇÇ = bind (F (rbt A)) (i-join _ _ _ (RBT.t t‚ÇÅ) a _ _ _ (RBT.t t‚ÇÇ)) Œª { (_ , _ , _ , inj‚ÇÅ t) ‚Üí ret ‚ü™ t ‚ü´
                                                                                       ; (_ , _ , _ , inj‚ÇÇ t) ‚Üí ret ‚ü™ t ‚ü´ }

    join/is-bounded : ‚àÄ {A} t‚ÇÅ a t‚ÇÇ ‚Üí IsBounded (rbt A) (join t‚ÇÅ a t‚ÇÇ) (1 + (2 * (RBT.n t‚ÇÅ Nat.‚äî RBT.n t‚ÇÇ ‚à∏ RBT.n t‚ÇÅ Nat.‚äì RBT.n t‚ÇÇ)))
    join/is-bounded {A} t‚ÇÅ a t‚ÇÇ =
      Eq.subst
        (IsBounded _ _) {x = 1 + (2 * (RBT.n t‚ÇÅ Nat.‚äî RBT.n t‚ÇÇ ‚à∏ RBT.n t‚ÇÅ Nat.‚äì RBT.n t‚ÇÇ)) + 0}
        (Eq.cong suc (Nat.+-identity ≥ (2 * (RBT.n t‚ÇÅ Nat.‚äî RBT.n t‚ÇÇ ‚à∏ RBT.n t‚ÇÅ Nat.‚äì RBT.n t‚ÇÇ))))
        (bound/bind/const (1 + (2 * (RBT.n t‚ÇÅ Nat.‚äî RBT.n t‚ÇÇ ‚à∏ RBT.n t‚ÇÅ Nat.‚äì RBT.n t‚ÇÇ))) 0
          (i-join/is-bounded _ _ _ (RBT.t t‚ÇÅ) a _ _ _ (RBT.t t‚ÇÇ))
          (Œª { (_ , _ , _ , inj‚ÇÅ t) ‚Üí bound/ret
             ; (_ , _ , _ , inj‚ÇÇ t) ‚Üí bound/ret}))

    nodes : RBT A ‚Üí val nat
    nodes ‚ü™ t ‚ü´ = i-nodes t

    nodes/bound/log-node-black-height : (t : RBT A) ‚Üí RBT.n t ‚â§ ‚åàlog‚ÇÇ (1 + (nodes t)) ‚åâ
    nodes/bound/log-node-black-height ‚ü™ t ‚ü´ = i-nodes/bound/log-node-black-height t

    nodes/lower-bound/log-node-black-height : (t : RBT A) ‚Üí RBT.n t ‚â• ‚åä (‚åàlog‚ÇÇ (1 + (nodes t)) ‚åâ ‚à∏ 1) /2‚åã
    nodes/lower-bound/log-node-black-height ‚ü™ t ‚ü´ = i-nodes/lower-bound/log-node-black-height t¬†

    join/cost : ‚àÄ {A} (t‚ÇÅ : RBT A) (t‚ÇÇ : RBT A) ‚Üí ‚ÑÇ
    join/cost {A} t‚ÇÅ t‚ÇÇ =
      let max = ‚åàlog‚ÇÇ (1 + (nodes t‚ÇÅ)) ‚åâ Nat.‚äî ‚åàlog‚ÇÇ (1 + (nodes t‚ÇÇ)) ‚åâ in
      let min = ‚åä (‚åàlog‚ÇÇ (1 + (nodes t‚ÇÅ)) ‚åâ ‚à∏ 1) /2‚åã Nat.‚äì ‚åä (‚åàlog‚ÇÇ (1 + (nodes t‚ÇÇ)) ‚åâ ‚à∏ 1) /2‚åã in
        1 + 2 * (max ‚à∏ min)

    join/is-bounded/nodes : ‚àÄ {A} t‚ÇÅ a t‚ÇÇ ‚Üí IsBounded (rbt A) (join t‚ÇÅ a t‚ÇÇ) (join/cost t‚ÇÅ t‚ÇÇ)
    join/is-bounded/nodes {A} t‚ÇÅ a t‚ÇÇ =
      bound/relax
        (Œª u ‚Üí
          let open ‚â§-Reasoning in
            begin
              1 + 2 * (RBT.n t‚ÇÅ Nat.‚äî RBT.n t‚ÇÇ ‚à∏ RBT.n t‚ÇÅ Nat.‚äì RBT.n t‚ÇÇ)
            ‚â§‚ü® Nat.+-mono ≥-‚â§ 1 (Nat.*-mono ≥-‚â§ 2 (Nat.‚à∏-monoÀ°-‚â§ (RBT.n t‚ÇÅ Nat.‚äì RBT.n t‚ÇÇ) (Nat.‚äî-mono-‚â§ (nodes/bound/log-node-black-height t‚ÇÅ) (nodes/bound/log-node-black-height t‚ÇÇ)))) ‚ü©
              1 + 2 * (‚åàlog‚ÇÇ (1 + (nodes t‚ÇÅ)) ‚åâ Nat.‚äî ‚åàlog‚ÇÇ (1 + (nodes t‚ÇÇ)) ‚åâ ‚à∏ RBT.n t‚ÇÅ Nat.‚äì RBT.n t‚ÇÇ)
            ‚â§‚ü® Nat.+-mono ≥-‚â§ 1 (Nat.*-mono ≥-‚â§ 2 (Nat.‚à∏-mono ≥-‚â§ (‚åàlog‚ÇÇ (1 + (nodes t‚ÇÅ)) ‚åâ Nat.‚äî ‚åàlog‚ÇÇ (1 + (nodes t‚ÇÇ)) ‚åâ) (Nat.‚äì-mono-‚â§ (nodes/lower-bound/log-node-black-height t‚ÇÅ) (nodes/lower-bound/log-node-black-height t‚ÇÇ)))) ‚ü©
              1 + 2 * (‚åàlog‚ÇÇ (1 + (nodes t‚ÇÅ)) ‚åâ Nat.‚äî ‚åàlog‚ÇÇ (1 + (nodes t‚ÇÇ)) ‚åâ ‚à∏ ‚åä (‚åàlog‚ÇÇ (1 + (nodes t‚ÇÅ)) ‚åâ ‚à∏ 1) /2‚åã Nat.‚äì ‚åä (‚åàlog‚ÇÇ (1 + (nodes t‚ÇÇ)) ‚åâ ‚à∏ 1) /2‚åã)
            ‚â°‚ü®‚ü©
              join/cost t‚ÇÅ t‚ÇÇ
            ‚àé
        )
        (join/is-bounded t‚ÇÅ a t‚ÇÇ)

    rec : {A : tp pos} {X : tp neg} ‚Üí
      cmp
        ( Œ† (U X) Œª _ ‚Üí
          Œ† (U (Œ† (rbt A) Œª _ ‚Üí Œ† (U X) Œª _ ‚Üí Œ† A Œª _ ‚Üí Œ† (rbt A) Œª _ ‚Üí Œ† (U X) Œª _ ‚Üí X)) Œª _ ‚Üí
          Œ† (rbt A) Œª _ ‚Üí X
        )
    rec {A} {X} z f ‚ü™ t ‚ü´ =
      i-rec {A} {X}
        z
        (Œª _ _ _ t‚ÇÅ ih‚ÇÅ a _ _ _ t‚ÇÇ ih‚ÇÇ ‚Üí f ‚ü™ t‚ÇÅ ‚ü´ ih‚ÇÅ a ‚ü™ t‚ÇÇ ‚ü´ ih‚ÇÇ)
        _ _ _ t
