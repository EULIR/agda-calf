{-# OPTIONS --prop --rewriting --allow-unsolved-metas #-}

open import Examples.Sorting.Parallel.Comparable

module Examples.Sorting.Parallel.MergeSortParMulti.Merge (M : Comparable) where

open Comparable M
open import Examples.Sorting.Parallel.Core M

open import Calf costMonoid
open import Calf.ParMetalanguage parCostMonoid
open import Calf.Types.Bool
open import Calf.Types.Nat
open import Calf.Types.List
open import Calf.Types.Eq
open import Calf.Types.Bounded costMonoid

open import Function
open import Relation.Nullary
open import Relation.Nullary.Negation
open import Relation.Binary.PropositionalEquality as Eq using (_‚â°_; refl; module ‚â°-Reasoning)
open import Data.Product using (_√ó_; _,_; ‚àÉ; proj‚ÇÅ; proj‚ÇÇ)
open import Data.Sum using (inj‚ÇÅ; inj‚ÇÇ)
open import Data.Nat as N using (‚Ñï; zero; suc; z‚â§n; s‚â§s; _+_; _‚à∏_; _*_; ‚åä_/2‚åã; ‚åà_/2‚åâ; pred; _‚äî_)
open import Data.Nat.Properties as N using (module ‚â§-Reasoning)
open import Data.Nat.Log2
open import Data.Nat.PredExp2

import Data.List.Relation.Unary.All as All
import Data.List.Relation.Unary.All.Properties as All

open import Examples.Sorting.Parallel.MergeSort.Split M


triple = Œ£++ (list A) Œª _ ‚Üí Œ£++ A Œª _ ‚Üí (list A)

splitMid/clocked : cmp (Œ† nat Œª k ‚Üí Œ† (list A) Œª l ‚Üí Œ† (U (meta (k N.< length l))) Œª _ ‚Üí F triple)
splitMid/clocked zero    (x ‚à∑ xs) (s‚â§s h) = ret ([] , x , xs)
splitMid/clocked (suc k) (x ‚à∑ xs) (s‚â§s h) =
  bind (F triple) (splitMid/clocked k xs h) Œª (l‚ÇÅ , mid , l‚ÇÇ) ‚Üí ret ((x ‚à∑ l‚ÇÅ) , mid , l‚ÇÇ)

splitMid/clocked/correct : ‚àÄ k k' l h ‚Üí k + suc k' ‚â° length l ‚Üí
  ‚àÉ Œª l‚ÇÅ ‚Üí ‚àÉ Œª mid ‚Üí ‚àÉ Œª l‚ÇÇ ‚Üí ‚óØ (splitMid/clocked k l h ‚â° ret (l‚ÇÅ , mid , l‚ÇÇ)) √ó length l‚ÇÅ ‚â° k √ó length l‚ÇÇ ‚â° k' √ó l ‚â° (l‚ÇÅ ++ [ mid ] ++ l‚ÇÇ)
splitMid/clocked/correct zero    k' (x ‚à∑ xs) (s‚â§s h) refl     = [] , x , xs , (Œª u ‚Üí refl) , refl , refl , refl
splitMid/clocked/correct (suc k) k' (x ‚à∑ xs) (s‚â§s h) h-length =
  let (l‚ÇÅ , mid , l‚ÇÇ , ‚â° , h‚ÇÅ , h‚ÇÇ , ‚â°-‚Ü≠) = splitMid/clocked/correct k k' xs h (N.suc-injective h-length) in
  x ‚à∑ l‚ÇÅ , mid , l‚ÇÇ , (Œª u ‚Üí Eq.cong (Œª e ‚Üí bind (F triple) e _) (‚â° u)) , Eq.cong suc h‚ÇÅ , h‚ÇÇ , Eq.cong (x ‚à∑_) ‚â°-‚Ü≠

splitMid/clocked/cost : cmp (Œ† nat Œª k ‚Üí Œ† (list A) Œª l ‚Üí Œ† (U (meta (k N.< length l))) Œª _ ‚Üí cost)
splitMid/clocked/cost _ _ _ = ùüò

splitMid/clocked‚â§splitMid/clocked/cost : ‚àÄ k l h ‚Üí IsBounded triple (splitMid/clocked k l h) (splitMid/clocked/cost k l h)
splitMid/clocked‚â§splitMid/clocked/cost zero    (x ‚à∑ xs) (s‚â§s h) = bound/ret
splitMid/clocked‚â§splitMid/clocked/cost (suc k) (x ‚à∑ xs) (s‚â§s h) =
  bound/bind/const ùüò ùüò (splitMid/clocked‚â§splitMid/clocked/cost k xs h) Œª _ ‚Üí bound/ret

splitMid : cmp (Œ† (list A) Œª l ‚Üí Œ† (U (meta (0 N.< length l))) Œª _ ‚Üí F triple)
splitMid (x ‚à∑ xs) (s‚â§s h) = splitMid/clocked ‚åä length (x ‚à∑ xs) /2‚åã (x ‚à∑ xs) (N.‚åän/2‚åã<n _)

splitMid/correct : ‚àÄ l h ‚Üí
  ‚àÉ Œª l‚ÇÅ ‚Üí ‚àÉ Œª mid ‚Üí ‚àÉ Œª l‚ÇÇ ‚Üí ‚óØ (splitMid l h ‚â° ret (l‚ÇÅ , mid , l‚ÇÇ)) √ó length l‚ÇÅ N.‚â§ ‚åä length l /2‚åã √ó length l‚ÇÇ N.‚â§ ‚åä length l /2‚åã √ó l ‚â° (l‚ÇÅ ++ [ mid ] ++ l‚ÇÇ)
splitMid/correct (x ‚à∑ xs) (s‚â§s h) =
  let (l‚ÇÅ , mid , l‚ÇÇ , ‚â° , h‚ÇÅ , h‚ÇÇ , ‚â°-‚Ü≠) = splitMid/clocked/correct ‚åä length (x ‚à∑ xs) /2‚åã ‚åä pred (length (x ‚à∑ xs)) /2‚åã (x ‚à∑ xs) (N.‚åän/2‚åã<n _)
                                              (let open ‚â°-Reasoning in
                                              begin
                                                ‚åä length (x ‚à∑ xs) /2‚åã + suc ‚åä pred (length (x ‚à∑ xs)) /2‚åã
                                              ‚â°‚ü®‚ü©
                                                ‚åä length (x ‚à∑ xs) /2‚åã + suc ‚åä length xs /2‚åã
                                              ‚â°‚ü®‚ü©
                                                ‚åà length xs /2‚åâ + suc ‚åä length xs /2‚åã
                                              ‚â°‚ü® N.+-suc ‚åà length xs /2‚åâ ‚åä length xs /2‚åã ‚ü©
                                                suc (‚åà length xs /2‚åâ + ‚åä length xs /2‚åã)
                                              ‚â°‚ü® Eq.cong suc (N.+-comm ‚åà length xs /2‚åâ ‚åä length xs /2‚åã) ‚ü©
                                                suc (‚åä length xs /2‚åã + ‚åà length xs /2‚åâ)
                                              ‚â°‚ü® Eq.cong suc (N.‚åän/2‚åã+‚åàn/2‚åâ‚â°n (length xs)) ‚ü©
                                                suc (length xs)
                                              ‚â°‚ü®‚ü©
                                                length (x ‚à∑ xs)
                                              ‚àé) in
  l‚ÇÅ , mid , l‚ÇÇ , ‚â° , N.‚â§-reflexive h‚ÇÅ , (
    let open ‚â§-Reasoning in
    begin
      length l‚ÇÇ
    ‚â°‚ü® h‚ÇÇ ‚ü©
      ‚åä pred (length (x ‚à∑ xs)) /2‚åã
    ‚â§‚ü® N.‚åän/2‚åã-mono N.pred[n]‚â§n ‚ü©
      ‚åä length (x ‚à∑ xs) /2‚åã
    ‚àé
  ), ‚â°-‚Ü≠

splitMid/cost : cmp (Œ† (list A) Œª l ‚Üí Œ† (U (meta (0 N.< length l))) Œª _ ‚Üí cost)
splitMid/cost (x ‚à∑ xs) (s‚â§s h) = splitMid/clocked/cost ‚åä length (x ‚à∑ xs) /2‚åã (x ‚à∑ xs) (N.‚åän/2‚åã<n _)

splitMid‚â§splitMid/cost : ‚àÄ l h ‚Üí IsBounded triple (splitMid l h) (splitMid/cost l h)
splitMid‚â§splitMid/cost (x ‚à∑ xs) (s‚â§s h) = splitMid/clocked‚â§splitMid/clocked/cost ‚åä length (x ‚à∑ xs) /2‚åã (x ‚à∑ xs) (N.‚åän/2‚åã<n _)


pairs = Œ£++ pair Œª _ ‚Üí pair

bisplit/clocked : cmp (Œ† nat Œª _ ‚Üí Œ† pair Œª _ ‚Üí Œ† nat Œª _ ‚Üí F pairs)
bisplit/clocked zero    (a      , b     ) n = ret ((a , []) , (b , []))
bisplit/clocked (suc k) ([]     , b     ) n = bind (F pairs) (split/clocked n b       ) Œª bp ‚Üí ret (([] , []) , bp)
bisplit/clocked (suc k) (a ‚à∑ as , []    ) n = bind (F pairs) (split/clocked n (a ‚à∑ as)) Œª ap ‚Üí ret (ap , ([] , []))
bisplit/clocked (suc k) (a ‚à∑ as , b ‚à∑ bs) n =
  bind (F pairs) (splitMid (a ‚à∑ as) (s‚â§s z‚â§n)) Œª (a‚ÇÅ , aMid , a‚ÇÇ) ‚Üí
    bind (F pairs) (splitMid (b ‚à∑ bs) (s‚â§s z‚â§n)) Œª (b‚ÇÅ , bMid , b‚ÇÇ) ‚Üí
      bind (F pairs) (aMid ‚â§·µá bMid) Œª condition ‚Üí
        if n N.‚â§·µá length a‚ÇÅ + length b‚ÇÅ
          then
            if condition
              then
                (bind (F pairs) (bisplit/clocked k (a ‚à∑ as , b‚ÇÅ) n) Œª ((a‚ÇÅ' , a‚ÇÇ') , (b‚ÇÅ' , b‚ÇÇ')) ‚Üí
                  ret ((a‚ÇÅ' , a‚ÇÇ') , (b‚ÇÅ' , b‚ÇÇ' ++ [ bMid ] ++ b‚ÇÇ)))
              else
                (bind (F pairs) (bisplit/clocked k (a‚ÇÅ , b ‚à∑ bs) n) Œª ((a‚ÇÅ' , a‚ÇÇ') , (b‚ÇÅ' , b‚ÇÇ')) ‚Üí
                  ret ((a‚ÇÅ' , a‚ÇÇ' ++ [ aMid ] ++ a‚ÇÇ) , (b‚ÇÅ' , b‚ÇÇ')))
          else
            if condition
              then
                (bind (F pairs) (bisplit/clocked k (a‚ÇÇ , b ‚à∑ bs) (n N.‚à∏ suc (length (a ‚à∑ as)))) Œª ((a‚ÇÅ' , a‚ÇÇ') , (b‚ÇÅ' , b‚ÇÇ')) ‚Üí
                  ret ((a‚ÇÅ ++ [ aMid ] ++ a‚ÇÅ' , a‚ÇÇ') , (b‚ÇÅ' , b‚ÇÇ')))
              else
                (bind (F pairs) (bisplit/clocked k (a ‚à∑ as , b‚ÇÇ) (n N.‚à∏ suc (length (b ‚à∑ bs)))) Œª ((a‚ÇÅ' , a‚ÇÇ') , (b‚ÇÅ' , b‚ÇÇ')) ‚Üí
                  ret ((a‚ÇÅ' , a‚ÇÇ') , (b‚ÇÅ ++ [ bMid ] ++ b‚ÇÅ' , b‚ÇÇ')))

record NSplitters (p : val pair) (n : val nat) (splitters : val pairs) : Set where
  private
    a = proj‚ÇÅ p
    b = proj‚ÇÇ p

    a‚ÇÅ = proj‚ÇÅ (proj‚ÇÅ splitters)
    a‚ÇÇ = proj‚ÇÇ (proj‚ÇÅ splitters)
    b‚ÇÅ = proj‚ÇÅ (proj‚ÇÇ splitters)
    b‚ÇÇ = proj‚ÇÇ (proj‚ÇÇ splitters)

  field
    proof-a : a ‚â° a‚ÇÅ ++ a‚ÇÇ
    proof-b : b ‚â° b‚ÇÅ ++ b‚ÇÇ
    proof-align‚ÇÅ : All (_‚â§* b‚ÇÇ) a‚ÇÅ
    proof-align‚ÇÇ : All (_‚â§* a‚ÇÇ) b‚ÇÅ
    proof-n : length a‚ÇÅ + length b‚ÇÅ ‚â° n

private
  lemma/‚â§·µá : ‚àÄ {m n} ‚Üí m N.‚â§ n ‚Üí (m N.‚â§·µá n) ‚â° true
  lemma/‚â§·µá {m} {n} m‚â§n with m N.‚â§·µá n | N.‚â§·µá-reflects-‚â§ m n
  ... | .true  | of ∏ _ = refl
  ... | .false | of‚Åø ¬¨m‚â§n = contradiction m‚â§n ¬¨m‚â§n

bisplit/clocked/correct : ‚àÄ k p n ‚Üí
  n N.‚â§ length (proj‚ÇÅ p) + length (proj‚ÇÇ p) ‚Üí
  ‚åàlog‚ÇÇ suc (length (proj‚ÇÅ p)) ‚åâ + ‚åàlog‚ÇÇ suc (length (proj‚ÇÇ p)) ‚åâ N.‚â§ k ‚Üí
  Sorted (proj‚ÇÅ p) ‚Üí
  Sorted (proj‚ÇÇ p) ‚Üí
  ‚óØ (‚àÉ Œª splitters ‚Üí bisplit/clocked k p n ‚â° ret splitters √ó NSplitters p n splitters)
bisplit/clocked/correct zero (a , b) n h h-clock sorted-a sorted-b u
  with ‚åàlog‚ÇÇn‚åâ‚â°0‚áín‚â§1 {suc (length a)} (N.n‚â§0‚áín‚â°0 (N.m+n‚â§o‚áím‚â§o ‚åàlog‚ÇÇ suc (length a) ‚åâ h-clock))
     | ‚åàlog‚ÇÇn‚åâ‚â°0‚áín‚â§1 {suc (length b)} (N.n‚â§0‚áín‚â°0 (N.m+n‚â§o‚áín‚â§o ‚åàlog‚ÇÇ suc (length a) ‚åâ h-clock))
bisplit/clocked/correct zero ([] , []) .zero z‚â§n h-clock [] [] u | s‚â§s z‚â§n | s‚â§s z‚â§n = (([] , []) , ([] , [])) , refl , record
  { proof-a = refl
  ; proof-b = refl
  ; proof-align‚ÇÅ = []
  ; proof-align‚ÇÇ = []
  ; proof-n = refl
  }
bisplit/clocked/correct (suc k) ([] , b) n h h-clock sorted-a sorted-b u =
  let (b‚ÇÅ , b‚ÇÇ , h-‚â° , length‚ÇÅ , _ , h-++) = split/clocked/correct n (length b N.‚à∏ n) b (
                                              let open ‚â°-Reasoning in
                                              begin
                                                n + (length b N.‚à∏ n)
                                              ‚â°‚ü® N.+-comm n (length b N.‚à∏ n) ‚ü©
                                                (length b N.‚à∏ n) + n
                                              ‚â°‚ü® N.m‚à∏n+n‚â°m h ‚ü©
                                                length b
                                              ‚àé
                                             ) u in
  (([] , []) , (b‚ÇÅ , b‚ÇÇ)) , Eq.cong (Œª e ‚Üí bind (F pairs) e _) h-‚â° , record
    { proof-a = refl
    ; proof-b = h-++
    ; proof-align‚ÇÅ = []
    ; proof-align‚ÇÇ = All.tabulate (const [])
    ; proof-n = length‚ÇÅ
    }
bisplit/clocked/correct (suc k) (a ‚à∑ as , []) n h h-clock sorted-a sorted-b u =
  let (a‚ÇÅ , a‚ÇÇ , h-‚â° , length‚ÇÅ , _ , h-++) = split/clocked/correct n (length (a ‚à∑ as) N.‚à∏ n) (a ‚à∑ as) (
                                              let open ‚â°-Reasoning in
                                              begin
                                                n + (length (a ‚à∑ as) N.‚à∏ n)
                                              ‚â°‚ü® N.+-comm n (length (a ‚à∑ as) N.‚à∏ n) ‚ü©
                                                (length (a ‚à∑ as) N.‚à∏ n) + n
                                              ‚â°‚ü® N.m‚à∏n+n‚â°m (N.‚â§-trans h (N.‚â§-reflexive (N.+-identity ≥ _))) ‚ü©
                                                length (a ‚à∑ as)
                                              ‚àé
                                             ) u in
  ((a‚ÇÅ , a‚ÇÇ) , ([] , [])) , Eq.cong (Œª e ‚Üí bind (F pairs) e _) h-‚â° , record
    { proof-a = h-++
    ; proof-b = refl
    ; proof-align‚ÇÅ = All.tabulate (const [])
    ; proof-align‚ÇÇ = []
    ; proof-n = Eq.trans (N.+-identity ≥ _) length‚ÇÅ
    }
bisplit/clocked/correct (suc k) (a ‚à∑ as , b ‚à∑ bs) n h h-clock sorted-a sorted-b u
  with splitMid/correct (a ‚à∑ as) (s‚â§s z‚â§n)
     | splitMid/correct (b ‚à∑ bs) (s‚â§s z‚â§n)
... | (a‚ÇÅ , aMid , a‚ÇÇ , h-‚â°-a , length-a‚ÇÅ , length-a‚ÇÇ , h-++-a)
    | (b‚ÇÅ , bMid , b‚ÇÇ , h-‚â°-b , length-b‚ÇÅ , length-b‚ÇÇ , h-++-b)
      with h-cost aMid bMid | n N.‚â§? length a‚ÇÅ + length b‚ÇÅ
bisplit/clocked/correct (suc k) (a ‚à∑ as , b ‚à∑ bs) n h h-clock sorted-a sorted-b u
    | (a‚ÇÅ , aMid , a‚ÇÇ , h-‚â°-a , length-a‚ÇÅ , length-a‚ÇÇ , h-++-a)
    | (b‚ÇÅ , bMid , b‚ÇÇ , h-‚â°-b , length-b‚ÇÅ , length-b‚ÇÇ , h-++-b)
    | ‚áì true  withCost c' [ h-bounded , h-‚â°-condition ] | yes n‚â§a‚ÇÅ+b‚ÇÅ =
  let sorted-b' = Eq.subst Sorted h-++-b sorted-b in
  let (((a‚ÇÅ' , a‚ÇÇ') , (b‚ÇÅ' , b‚ÇÇ')) , h-‚â° , h-splitters) = bisplit/clocked/correct k (a ‚à∑ as , b‚ÇÅ) n (
                                                            let open ‚â§-Reasoning in
                                                            begin
                                                              n
                                                            ‚â§‚ü® n‚â§a‚ÇÅ+b‚ÇÅ ‚ü©
                                                              length a‚ÇÅ + length b‚ÇÅ
                                                            ‚â§‚ü® N.+-monoÀ°-‚â§ (length b‚ÇÅ) (N.m‚â§m+n (length a‚ÇÅ) (length (aMid ‚à∑ a‚ÇÇ))) ‚ü©
                                                              (length a‚ÇÅ + length (aMid ‚à∑ a‚ÇÇ)) + length b‚ÇÅ
                                                            ‚â°Àò‚ü® Eq.cong (Œª l ‚Üí l + length b‚ÇÅ) (length-++ a‚ÇÅ) ‚ü©
                                                              length (a‚ÇÅ ++ aMid ‚à∑ a‚ÇÇ) + length b‚ÇÅ
                                                            ‚â°Àò‚ü® Eq.cong (Œª l ‚Üí length l + length b‚ÇÅ) h-++-a ‚ü©
                                                              length (a ‚à∑ as) + length b‚ÇÅ
                                                            ‚àé
                                                          ) (
                                                            let open ‚â§-Reasoning in
                                                            begin
                                                              ‚åàlog‚ÇÇ suc (length (a ‚à∑ as)) ‚åâ + ‚åàlog‚ÇÇ suc (length b‚ÇÅ) ‚åâ
                                                            ‚â§‚ü® N.+-mono ≥-‚â§ ‚åàlog‚ÇÇ suc (length (a ‚à∑ as)) ‚åâ (log‚ÇÇ-mono (s‚â§s length-b‚ÇÅ)) ‚ü©
                                                              ‚åàlog‚ÇÇ suc (length (a ‚à∑ as)) ‚åâ + ‚åàlog‚ÇÇ ‚åà suc (length (b ‚à∑ bs)) /2‚åâ ‚åâ
                                                            ‚â§‚ü®
                                                              N.+-cancelÀ°-‚â§ 1 $
                                                                begin
                                                                  suc (‚åàlog‚ÇÇ suc (length (a ‚à∑ as)) ‚åâ + ‚åàlog‚ÇÇ ‚åà suc (length (b ‚à∑ bs)) /2‚åâ ‚åâ)
                                                                ‚â°Àò‚ü® N.+-suc ‚åàlog‚ÇÇ suc (length (a ‚à∑ as)) ‚åâ ‚åàlog‚ÇÇ ‚åà suc (length (b ‚à∑ bs)) /2‚åâ ‚åâ ‚ü©
                                                                  ‚åàlog‚ÇÇ suc (length (a ‚à∑ as)) ‚åâ + suc ‚åàlog‚ÇÇ ‚åà suc (length (b ‚à∑ bs)) /2‚åâ ‚åâ
                                                                ‚â°‚ü®‚ü©
                                                                  ‚åàlog‚ÇÇ suc (length (a ‚à∑ as)) ‚åâ + ‚åàlog‚ÇÇ suc (length (b ‚à∑ bs)) ‚åâ
                                                                ‚â§‚ü® h-clock ‚ü©
                                                                  suc k
                                                                ‚àé
                                                            ‚ü©
                                                              k
                                                            ‚àé
                                                          ) sorted-a (++‚ÅªÀ° b‚ÇÅ sorted-b') u in
  ((a‚ÇÅ' , a‚ÇÇ') , (b‚ÇÅ' , b‚ÇÇ' ++ [ bMid ] ++ b‚ÇÇ)) , (
    let open ‚â°-Reasoning in
    begin
      bisplit/clocked (suc k) (a ‚à∑ as , b ‚à∑ bs) n
    ‚â°‚ü®‚ü©
      (bind (F pairs) (splitMid (a ‚à∑ as) (s‚â§s z‚â§n)) Œª (a‚ÇÅ , aMid , a‚ÇÇ) ‚Üí
        bind (F pairs) (splitMid (b ‚à∑ bs) (s‚â§s z‚â§n)) Œª (b‚ÇÅ , bMid , b‚ÇÇ) ‚Üí
          bind (F pairs) (aMid ‚â§·µá bMid) Œª condition ‚Üí
            if n N.‚â§·µá length a‚ÇÅ + length b‚ÇÅ
              then
                if condition
                  then
                    (bind (F pairs) (bisplit/clocked k (a ‚à∑ as , b‚ÇÅ) n) Œª ((a‚ÇÅ' , a‚ÇÇ') , (b‚ÇÅ' , b‚ÇÇ')) ‚Üí
                      ret ((a‚ÇÅ' , a‚ÇÇ') , (b‚ÇÅ' , b‚ÇÇ' ++ [ bMid ] ++ b‚ÇÇ)))
                  else
                    (bind (F pairs) (bisplit/clocked k (a‚ÇÅ , b ‚à∑ bs) n) Œª ((a‚ÇÅ' , a‚ÇÇ') , (b‚ÇÅ' , b‚ÇÇ')) ‚Üí
                      ret ((a‚ÇÅ' , a‚ÇÇ' ++ [ aMid ] ++ a‚ÇÇ) , (b‚ÇÅ' , b‚ÇÇ')))
              else
                if condition
                  then
                    (bind (F pairs) (bisplit/clocked k (a‚ÇÇ , b ‚à∑ bs) (n N.‚à∏ suc (length (a ‚à∑ as)))) Œª ((a‚ÇÅ' , a‚ÇÇ') , (b‚ÇÅ' , b‚ÇÇ')) ‚Üí
                      ret ((a‚ÇÅ ++ [ aMid ] ++ a‚ÇÅ' , a‚ÇÇ') , (b‚ÇÅ' , b‚ÇÇ')))
                  else
                    (bind (F pairs) (bisplit/clocked k (a ‚à∑ as , b‚ÇÇ) (n N.‚à∏ suc (length (b ‚à∑ bs)))) Œª ((a‚ÇÅ' , a‚ÇÇ') , (b‚ÇÅ' , b‚ÇÇ')) ‚Üí
                      ret ((a‚ÇÅ' , a‚ÇÇ') , (b‚ÇÅ ++ [ bMid ] ++ b‚ÇÅ' , b‚ÇÇ'))))
    ‚â°‚ü®
      Eq.cong
        (Œª e ‚Üí
          bind (F pairs) e Œª (a‚ÇÅ , aMid , a‚ÇÇ) ‚Üí
            bind (F pairs) (splitMid (b ‚à∑ bs) (s‚â§s z‚â§n)) Œª (b‚ÇÅ , bMid , b‚ÇÇ) ‚Üí
              bind (F pairs) (aMid ‚â§·µá bMid) Œª condition ‚Üí
                if n N.‚â§·µá length a‚ÇÅ + length b‚ÇÅ
                  then
                    if condition
                      then
                        (bind (F pairs) (bisplit/clocked k (a ‚à∑ as , b‚ÇÅ) n) Œª ((a‚ÇÅ' , a‚ÇÇ') , (b‚ÇÅ' , b‚ÇÇ')) ‚Üí
                          ret ((a‚ÇÅ' , a‚ÇÇ') , (b‚ÇÅ' , b‚ÇÇ' ++ [ bMid ] ++ b‚ÇÇ)))
                      else
                        (bind (F pairs) (bisplit/clocked k (a‚ÇÅ , b ‚à∑ bs) n) Œª ((a‚ÇÅ' , a‚ÇÇ') , (b‚ÇÅ' , b‚ÇÇ')) ‚Üí
                          ret ((a‚ÇÅ' , a‚ÇÇ' ++ [ aMid ] ++ a‚ÇÇ) , (b‚ÇÅ' , b‚ÇÇ')))
                  else
                    if condition
                      then
                        (bind (F pairs) (bisplit/clocked k (a‚ÇÇ , b ‚à∑ bs) (n N.‚à∏ suc (length (a ‚à∑ as)))) Œª ((a‚ÇÅ' , a‚ÇÇ') , (b‚ÇÅ' , b‚ÇÇ')) ‚Üí
                          ret ((a‚ÇÅ ++ [ aMid ] ++ a‚ÇÅ' , a‚ÇÇ') , (b‚ÇÅ' , b‚ÇÇ')))
                      else
                        (bind (F pairs) (bisplit/clocked k (a ‚à∑ as , b‚ÇÇ) (n N.‚à∏ suc (length (b ‚à∑ bs)))) Œª ((a‚ÇÅ' , a‚ÇÇ') , (b‚ÇÅ' , b‚ÇÇ')) ‚Üí
                          ret ((a‚ÇÅ' , a‚ÇÇ') , (b‚ÇÅ ++ [ bMid ] ++ b‚ÇÅ' , b‚ÇÇ')))
        )
        (h-‚â°-a u)
    ‚ü©
      (bind (F pairs) (splitMid (b ‚à∑ bs) (s‚â§s z‚â§n)) Œª (b‚ÇÅ , bMid , b‚ÇÇ) ‚Üí
        bind (F pairs) (aMid ‚â§·µá bMid) Œª condition ‚Üí
          if n N.‚â§·µá length a‚ÇÅ + length b‚ÇÅ
            then
              if condition
                then
                  (bind (F pairs) (bisplit/clocked k (a ‚à∑ as , b‚ÇÅ) n) Œª ((a‚ÇÅ' , a‚ÇÇ') , (b‚ÇÅ' , b‚ÇÇ')) ‚Üí
                    ret ((a‚ÇÅ' , a‚ÇÇ') , (b‚ÇÅ' , b‚ÇÇ' ++ [ bMid ] ++ b‚ÇÇ)))
                else
                  (bind (F pairs) (bisplit/clocked k (a‚ÇÅ , b ‚à∑ bs) n) Œª ((a‚ÇÅ' , a‚ÇÇ') , (b‚ÇÅ' , b‚ÇÇ')) ‚Üí
                    ret ((a‚ÇÅ' , a‚ÇÇ' ++ [ aMid ] ++ a‚ÇÇ) , (b‚ÇÅ' , b‚ÇÇ')))
            else
              if condition
                then
                  (bind (F pairs) (bisplit/clocked k (a‚ÇÇ , b ‚à∑ bs) (n N.‚à∏ suc (length (a ‚à∑ as)))) Œª ((a‚ÇÅ' , a‚ÇÇ') , (b‚ÇÅ' , b‚ÇÇ')) ‚Üí
                    ret ((a‚ÇÅ ++ [ aMid ] ++ a‚ÇÅ' , a‚ÇÇ') , (b‚ÇÅ' , b‚ÇÇ')))
                else
                  (bind (F pairs) (bisplit/clocked k (a ‚à∑ as , b‚ÇÇ) (n N.‚à∏ suc (length (b ‚à∑ bs)))) Œª ((a‚ÇÅ' , a‚ÇÇ') , (b‚ÇÅ' , b‚ÇÇ')) ‚Üí
                    ret ((a‚ÇÅ' , a‚ÇÇ') , (b‚ÇÅ ++ [ bMid ] ++ b‚ÇÅ' , b‚ÇÇ'))))
    ‚â°‚ü®
      Eq.cong
        (Œª e ‚Üí
          bind (F pairs) e Œª (b‚ÇÅ , bMid , b‚ÇÇ) ‚Üí
            bind (F pairs) (aMid ‚â§·µá bMid) Œª condition ‚Üí
              if n N.‚â§·µá length a‚ÇÅ + length b‚ÇÅ
                then
                  if condition
                    then
                      (bind (F pairs) (bisplit/clocked k (a ‚à∑ as , b‚ÇÅ) n) Œª ((a‚ÇÅ' , a‚ÇÇ') , (b‚ÇÅ' , b‚ÇÇ')) ‚Üí
                        ret ((a‚ÇÅ' , a‚ÇÇ') , (b‚ÇÅ' , b‚ÇÇ' ++ [ bMid ] ++ b‚ÇÇ)))
                    else
                      (bind (F pairs) (bisplit/clocked k (a‚ÇÅ , b ‚à∑ bs) n) Œª ((a‚ÇÅ' , a‚ÇÇ') , (b‚ÇÅ' , b‚ÇÇ')) ‚Üí
                        ret ((a‚ÇÅ' , a‚ÇÇ' ++ [ aMid ] ++ a‚ÇÇ) , (b‚ÇÅ' , b‚ÇÇ')))
                else
                  if condition
                    then
                      (bind (F pairs) (bisplit/clocked k (a‚ÇÇ , b ‚à∑ bs) (n N.‚à∏ suc (length (a ‚à∑ as)))) Œª ((a‚ÇÅ' , a‚ÇÇ') , (b‚ÇÅ' , b‚ÇÇ')) ‚Üí
                        ret ((a‚ÇÅ ++ [ aMid ] ++ a‚ÇÅ' , a‚ÇÇ') , (b‚ÇÅ' , b‚ÇÇ')))
                    else
                      (bind (F pairs) (bisplit/clocked k (a ‚à∑ as , b‚ÇÇ) (n N.‚à∏ suc (length (b ‚à∑ bs)))) Œª ((a‚ÇÅ' , a‚ÇÇ') , (b‚ÇÅ' , b‚ÇÇ')) ‚Üí
                        ret ((a‚ÇÅ' , a‚ÇÇ') , (b‚ÇÅ ++ [ bMid ] ++ b‚ÇÅ' , b‚ÇÇ')))
        )
        (h-‚â°-b u)
    ‚ü©
      (bind (F pairs) (aMid ‚â§·µá bMid) Œª condition ‚Üí
        if n N.‚â§·µá length a‚ÇÅ + length b‚ÇÅ
          then
            if condition
              then
                (bind (F pairs) (bisplit/clocked k (a ‚à∑ as , b‚ÇÅ) n) Œª ((a‚ÇÅ' , a‚ÇÇ') , (b‚ÇÅ' , b‚ÇÇ')) ‚Üí
                  ret ((a‚ÇÅ' , a‚ÇÇ') , (b‚ÇÅ' , b‚ÇÇ' ++ [ bMid ] ++ b‚ÇÇ)))
              else
                (bind (F pairs) (bisplit/clocked k (a‚ÇÅ , b ‚à∑ bs) n) Œª ((a‚ÇÅ' , a‚ÇÇ') , (b‚ÇÅ' , b‚ÇÇ')) ‚Üí
                  ret ((a‚ÇÅ' , a‚ÇÇ' ++ [ aMid ] ++ a‚ÇÇ) , (b‚ÇÅ' , b‚ÇÇ')))
          else
            if condition
              then
                (bind (F pairs) (bisplit/clocked k (a‚ÇÇ , b ‚à∑ bs) (n N.‚à∏ suc (length (a ‚à∑ as)))) Œª ((a‚ÇÅ' , a‚ÇÇ') , (b‚ÇÅ' , b‚ÇÇ')) ‚Üí
                  ret ((a‚ÇÅ ++ [ aMid ] ++ a‚ÇÅ' , a‚ÇÇ') , (b‚ÇÅ' , b‚ÇÇ')))
              else
                (bind (F pairs) (bisplit/clocked k (a ‚à∑ as , b‚ÇÇ) (n N.‚à∏ suc (length (b ‚à∑ bs)))) Œª ((a‚ÇÅ' , a‚ÇÇ') , (b‚ÇÅ' , b‚ÇÇ')) ‚Üí
                  ret ((a‚ÇÅ' , a‚ÇÇ') , (b‚ÇÅ ++ [ bMid ] ++ b‚ÇÅ' , b‚ÇÇ'))))
    ‚â°‚ü®
      Eq.cong
        (Œª e ‚Üí
          bind (F pairs) e Œª condition ‚Üí
            if n N.‚â§·µá length a‚ÇÅ + length b‚ÇÅ
              then
                if condition
                  then
                    (bind (F pairs) (bisplit/clocked k (a ‚à∑ as , b‚ÇÅ) n) Œª ((a‚ÇÅ' , a‚ÇÇ') , (b‚ÇÅ' , b‚ÇÇ')) ‚Üí
                      ret ((a‚ÇÅ' , a‚ÇÇ') , (b‚ÇÅ' , b‚ÇÇ' ++ [ bMid ] ++ b‚ÇÇ)))
                  else
                    (bind (F pairs) (bisplit/clocked k (a‚ÇÅ , b ‚à∑ bs) n) Œª ((a‚ÇÅ' , a‚ÇÇ') , (b‚ÇÅ' , b‚ÇÇ')) ‚Üí
                      ret ((a‚ÇÅ' , a‚ÇÇ' ++ [ aMid ] ++ a‚ÇÇ) , (b‚ÇÅ' , b‚ÇÇ')))
              else
                if condition
                  then
                    (bind (F pairs) (bisplit/clocked k (a‚ÇÇ , b ‚à∑ bs) (n N.‚à∏ suc (length (a ‚à∑ as)))) Œª ((a‚ÇÅ' , a‚ÇÇ') , (b‚ÇÅ' , b‚ÇÇ')) ‚Üí
                      ret ((a‚ÇÅ ++ [ aMid ] ++ a‚ÇÅ' , a‚ÇÇ') , (b‚ÇÅ' , b‚ÇÇ')))
                  else
                    (bind (F pairs) (bisplit/clocked k (a ‚à∑ as , b‚ÇÇ) (n N.‚à∏ suc (length (b ‚à∑ bs)))) Œª ((a‚ÇÅ' , a‚ÇÇ') , (b‚ÇÅ' , b‚ÇÇ')) ‚Üí
                      ret ((a‚ÇÅ' , a‚ÇÇ') , (b‚ÇÅ ++ [ bMid ] ++ b‚ÇÅ' , b‚ÇÇ')))
        )
        (Eq.trans (eq/ref h-‚â°-condition) (step/ext (F bool) (ret true) c' u))
    ‚ü©
      (if n N.‚â§·µá length a‚ÇÅ + length b‚ÇÅ
        then
          if true
            then
              (bind (F pairs) (bisplit/clocked k (a ‚à∑ as , b‚ÇÅ) n) Œª ((a‚ÇÅ' , a‚ÇÇ') , (b‚ÇÅ' , b‚ÇÇ')) ‚Üí
                ret ((a‚ÇÅ' , a‚ÇÇ') , (b‚ÇÅ' , b‚ÇÇ' ++ [ bMid ] ++ b‚ÇÇ)))
            else
              (bind (F pairs) (bisplit/clocked k (a‚ÇÅ , b ‚à∑ bs) n) Œª ((a‚ÇÅ' , a‚ÇÇ') , (b‚ÇÅ' , b‚ÇÇ')) ‚Üí
                ret ((a‚ÇÅ' , a‚ÇÇ' ++ [ aMid ] ++ a‚ÇÇ) , (b‚ÇÅ' , b‚ÇÇ')))
        else
          if true
            then
              (bind (F pairs) (bisplit/clocked k (a‚ÇÇ , b ‚à∑ bs) (n N.‚à∏ suc (length (a ‚à∑ as)))) Œª ((a‚ÇÅ' , a‚ÇÇ') , (b‚ÇÅ' , b‚ÇÇ')) ‚Üí
                ret ((a‚ÇÅ ++ [ aMid ] ++ a‚ÇÅ' , a‚ÇÇ') , (b‚ÇÅ' , b‚ÇÇ')))
            else
              (bind (F pairs) (bisplit/clocked k (a ‚à∑ as , b‚ÇÇ) (n N.‚à∏ suc (length (b ‚à∑ bs)))) Œª ((a‚ÇÅ' , a‚ÇÇ') , (b‚ÇÅ' , b‚ÇÇ')) ‚Üí
                ret ((a‚ÇÅ' , a‚ÇÇ') , (b‚ÇÅ ++ [ bMid ] ++ b‚ÇÅ' , b‚ÇÇ'))))
    ‚â°‚ü®‚ü©
      (if n N.‚â§·µá length a‚ÇÅ + length b‚ÇÅ
        then
          (bind (F pairs) (bisplit/clocked k (a ‚à∑ as , b‚ÇÅ) n) Œª ((a‚ÇÅ' , a‚ÇÇ') , (b‚ÇÅ' , b‚ÇÇ')) ‚Üí
            ret ((a‚ÇÅ' , a‚ÇÇ') , (b‚ÇÅ' , b‚ÇÇ' ++ [ bMid ] ++ b‚ÇÇ)))
        else
          (bind (F pairs) (bisplit/clocked k (a‚ÇÇ , b ‚à∑ bs) (n N.‚à∏ suc (length (a ‚à∑ as)))) Œª ((a‚ÇÅ' , a‚ÇÇ') , (b‚ÇÅ' , b‚ÇÇ')) ‚Üí
            ret ((a‚ÇÅ ++ [ aMid ] ++ a‚ÇÅ' , a‚ÇÇ') , (b‚ÇÅ' , b‚ÇÇ'))))
    ‚â°‚ü®
      Eq.cong
        (Œª e ‚Üí
          if e
            then
              (bind (F pairs) (bisplit/clocked k (a ‚à∑ as , b‚ÇÅ) n) Œª ((a‚ÇÅ' , a‚ÇÇ') , (b‚ÇÅ' , b‚ÇÇ')) ‚Üí
                ret ((a‚ÇÅ' , a‚ÇÇ') , (b‚ÇÅ' , b‚ÇÇ' ++ [ bMid ] ++ b‚ÇÇ)))
            else
              (bind (F pairs) (bisplit/clocked k (a‚ÇÇ , b ‚à∑ bs) (n N.‚à∏ suc (length (a ‚à∑ as)))) Œª ((a‚ÇÅ' , a‚ÇÇ') , (b‚ÇÅ' , b‚ÇÇ')) ‚Üí
                ret ((a‚ÇÅ ++ [ aMid ] ++ a‚ÇÅ' , a‚ÇÇ') , (b‚ÇÅ' , b‚ÇÇ')))
        )
        (lemma/‚â§·µá n‚â§a‚ÇÅ+b‚ÇÅ)
    ‚ü©
      (if true
        then
          (bind (F pairs) (bisplit/clocked k (a ‚à∑ as , b‚ÇÅ) n) Œª ((a‚ÇÅ' , a‚ÇÇ') , (b‚ÇÅ' , b‚ÇÇ')) ‚Üí
            ret ((a‚ÇÅ' , a‚ÇÇ') , (b‚ÇÅ' , b‚ÇÇ' ++ [ bMid ] ++ b‚ÇÇ)))
        else
          (bind (F pairs) (bisplit/clocked k (a‚ÇÇ , b ‚à∑ bs) (n N.‚à∏ suc (length (a ‚à∑ as)))) Œª ((a‚ÇÅ' , a‚ÇÇ') , (b‚ÇÅ' , b‚ÇÇ')) ‚Üí
            ret ((a‚ÇÅ ++ [ aMid ] ++ a‚ÇÅ' , a‚ÇÇ') , (b‚ÇÅ' , b‚ÇÇ'))))
    ‚â°‚ü®‚ü©
      (bind (F pairs) (bisplit/clocked k (a ‚à∑ as , b‚ÇÅ) n) Œª ((a‚ÇÅ' , a‚ÇÇ') , (b‚ÇÅ' , b‚ÇÇ')) ‚Üí
        ret ((a‚ÇÅ' , a‚ÇÇ') , (b‚ÇÅ' , b‚ÇÇ' ++ [ bMid ] ++ b‚ÇÇ)))
    ‚â°‚ü® Eq.cong (Œª e ‚Üí bind (F pairs) e _) h-‚â° ‚ü©
      ret ((a‚ÇÅ' , a‚ÇÇ') , (b‚ÇÅ' , b‚ÇÇ' ++ [ bMid ] ++ b‚ÇÇ))
    ‚àé
  ) , record
    { proof-a = NSplitters.proof-a h-splitters
    ; proof-b =
      let open ‚â°-Reasoning in
      begin
        b ‚à∑ bs
      ‚â°‚ü® h-++-b ‚ü©
        b‚ÇÅ ++ [ bMid ] ++ b‚ÇÇ
      ‚â°‚ü® Eq.cong (_++ [ bMid ] ++ b‚ÇÇ) (NSplitters.proof-b h-splitters) ‚ü©
        (b‚ÇÅ' ++ b‚ÇÇ') ++ [ bMid ] ++ b‚ÇÇ
      ‚â°‚ü® ++-assoc b‚ÇÅ' b‚ÇÇ' ([ bMid ] ++ b‚ÇÇ) ‚ü©
        b‚ÇÅ' ++ (b‚ÇÇ' ++ [ bMid ] ++ b‚ÇÇ)
      ‚àé
    ; proof-align‚ÇÅ =
      All.map
        (Œª {a·µ¢} h-b‚ÇÇ' ‚Üí
          let a·µ¢‚â§bMid : a·µ¢ ‚â§ bMid
              a·µ¢‚â§bMid = {!   !}
          in
          All.++‚Å∫ h-b‚ÇÇ' (a·µ¢‚â§bMid ‚à∑ ‚â§-‚â§* a·µ¢‚â§bMid (uncons‚ÇÅ (++‚Åª ≥ b‚ÇÅ sorted-b'))))
        (NSplitters.proof-align‚ÇÅ h-splitters)
    ; proof-align‚ÇÇ = NSplitters.proof-align‚ÇÇ h-splitters
    ; proof-n = NSplitters.proof-n h-splitters
    }
bisplit/clocked/correct (suc k) (a ‚à∑ as , b ‚à∑ bs) n h h-clock sorted-a sorted-b u
    | (a‚ÇÅ , aMid , a‚ÇÇ , h-‚â°-a , length-a‚ÇÅ , length-a‚ÇÇ , h-++-a)
    | (b‚ÇÅ , bMid , b‚ÇÇ , h-‚â°-b , length-b‚ÇÅ , length-b‚ÇÇ , h-++-b)
    | ‚áì true  withCost c' [ h-bounded , h-‚â°-condition ] | no ¬¨n‚â§a‚ÇÅ+b‚ÇÅ = {!   !}
bisplit/clocked/correct (suc k) (a ‚à∑ as , b ‚à∑ bs) n h h-clock sorted-a sorted-b u
    | (a‚ÇÅ , aMid , a‚ÇÇ , h-‚â°-a , length-a‚ÇÅ , length-a‚ÇÇ , h-++-a)
    | (b‚ÇÅ , bMid , b‚ÇÇ , h-‚â°-b , length-b‚ÇÅ , length-b‚ÇÇ , h-++-b)
    | ‚áì false withCost c' [ h-bounded , h-‚â°-condition ] | todo = {!   !}

bisplit/clocked/cost : cmp (Œ† nat Œª _ ‚Üí Œ† pair Œª _ ‚Üí Œ† nat Œª _ ‚Üí cost)
bisplit/clocked/cost zero    (a      , b     ) n = ùüò
bisplit/clocked/cost (suc k) ([]     , b     ) n = bind cost (split/clocked n b       ) Œª bp ‚Üí split/clocked/cost n b        ‚äï ùüò
bisplit/clocked/cost (suc k) (a ‚à∑ as , []    ) n = bind cost (split/clocked n (a ‚à∑ as)) Œª ap ‚Üí split/clocked/cost n (a ‚à∑ as) ‚äï ùüò
bisplit/clocked/cost (suc k) (a ‚à∑ as , b ‚à∑ bs) n =
  bind cost (splitMid (a ‚à∑ as) (s‚â§s z‚â§n)) Œª (a‚ÇÅ , aMid , a‚ÇÇ) ‚Üí splitMid/cost (a ‚à∑ as) (s‚â§s z‚â§n) ‚äï
    bind cost (splitMid (b ‚à∑ bs) (s‚â§s z‚â§n)) Œª (b‚ÇÅ , bMid , b‚ÇÇ) ‚Üí splitMid/cost (b ‚à∑ bs) (s‚â§s z‚â§n) ‚äï
      bind cost (aMid ‚â§·µá bMid) Œª condition ‚Üí (1 , 1) ‚äï (
        if n N.‚â§·µá length a‚ÇÅ + length b‚ÇÅ
          then
            if condition
              then
                (bind cost (bisplit/clocked k (a ‚à∑ as , b‚ÇÅ) n) Œª ((a‚ÇÅ' , a‚ÇÇ') , (b‚ÇÅ' , b‚ÇÇ')) ‚Üí bisplit/clocked/cost k (a ‚à∑ as , b‚ÇÅ) n ‚äï
                  ùüò)
              else
                (bind cost (bisplit/clocked k (a‚ÇÅ , b ‚à∑ bs) n) Œª ((a‚ÇÅ' , a‚ÇÇ') , (b‚ÇÅ' , b‚ÇÇ')) ‚Üí bisplit/clocked/cost k (a‚ÇÅ , b ‚à∑ bs) n ‚äï
                  ùüò)
          else
            if condition
              then
                (bind cost (bisplit/clocked k (a‚ÇÇ , b ‚à∑ bs) (n N.‚à∏ suc (length (a ‚à∑ as)))) Œª ((a‚ÇÅ' , a‚ÇÇ') , (b‚ÇÅ' , b‚ÇÇ')) ‚Üí bisplit/clocked/cost k (a‚ÇÇ , b ‚à∑ bs) (n N.‚à∏ suc (length (a ‚à∑ as))) ‚äï
                  ùüò)
              else
                (bind cost (bisplit/clocked k (a ‚à∑ as , b‚ÇÇ) (n N.‚à∏ suc (length (b ‚à∑ bs)))) Œª ((a‚ÇÅ' , a‚ÇÇ') , (b‚ÇÅ' , b‚ÇÇ')) ‚Üí bisplit/clocked/cost k (a ‚à∑ as , b‚ÇÇ) (n N.‚à∏ suc (length (b ‚à∑ bs))) ‚äï
                  ùüò)
      )

bisplit/clocked/cost/closed : cmp (Œ† nat Œª _ ‚Üí Œ† pair Œª _ ‚Üí Œ† nat Œª _ ‚Üí cost)
bisplit/clocked/cost/closed k (a , b) n = k , k

bisplit/clocked/cost‚â§bisplit/clocked/cost/closed : ‚àÄ k p n ‚Üí ‚óØ (bisplit/clocked/cost k p n ‚â§‚Çö bisplit/clocked/cost/closed k p n)
bisplit/clocked/cost‚â§bisplit/clocked/cost/closed = {!   !}

bisplit/clocked‚â§bisplit/clocked/cost : ‚àÄ k p n ‚Üí IsBounded pairs (bisplit/clocked k p n) (bisplit/clocked/cost k p n)
bisplit/clocked‚â§bisplit/clocked/cost = {!   !}

bisplit/clocked‚â§bisplit/clocked/cost/closed : ‚àÄ k p n ‚Üí
  IsBounded pairs (bisplit/clocked k p n) (bisplit/clocked/cost/closed k p n)
bisplit/clocked‚â§bisplit/clocked/cost/closed k p n =
  bound/relax (bisplit/clocked/cost‚â§bisplit/clocked/cost/closed k p n) (bisplit/clocked‚â§bisplit/clocked/cost k p n)


merge : cmp (Œ† pair Œª _ ‚Üí F (list A))
merge = {!   !}

merge/correct : ‚àÄ l‚ÇÅ l‚ÇÇ ‚Üí
  ‚óØ (‚àÉ Œª l ‚Üí merge (l‚ÇÅ , l‚ÇÇ) ‚â° ret l √ó (Sorted l‚ÇÅ ‚Üí Sorted l‚ÇÇ ‚Üí SortedOf (l‚ÇÅ ++ l‚ÇÇ) l))
merge/correct = {!   !}

merge/cost : cmp (Œ† pair Œª _ ‚Üí cost)
merge/cost = {!   !}

merge/cost/closed : cmp (Œ† pair Œª _ ‚Üí cost)
merge/cost/closed = {!   !}

merge‚â§merge/cost : ‚àÄ l‚ÇÅ l‚ÇÇ ‚Üí IsBounded (list A) (merge (l‚ÇÅ , l‚ÇÇ)) (merge/cost (l‚ÇÅ , l‚ÇÇ))
merge‚â§merge/cost = {!   !}

merge‚â§merge/cost/closed : ‚àÄ l‚ÇÅ l‚ÇÇ ‚Üí IsBounded (list A) (merge (l‚ÇÅ , l‚ÇÇ)) (merge/cost/closed (l‚ÇÅ , l‚ÇÇ))
merge‚â§merge/cost/closed = {!   !}
