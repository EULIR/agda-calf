{-# OPTIONS --prop --rewriting #-}

module Examples.TreeSum where

open import Calf.CostMonoid
open import Calf.CostMonoids using (‚Ñï¬≤-ParCostMonoid)

parCostMonoid = ‚Ñï¬≤-ParCostMonoid
open ParCostMonoid parCostMonoid

open import Calf costMonoid
open import Calf.ParMetalanguage parCostMonoid

open import Relation.Binary.PropositionalEquality as Eq using (_‚â°_; refl; _‚â¢_; module ‚â°-Reasoning)
open import Data.Nat as Nat
open import Data.Nat.Properties as N using (module ‚â§-Reasoning)
open import Data.Product

nat : tp pos
nat = U (meta ‚Ñï)

add : cmp (Œ† nat Œª _ ‚Üí Œ† nat Œª _ ‚Üí F nat)
add m n = step' (F nat) (1 , 1) (ret (m + n))

ub/add : ‚àÄ m n ‚Üí ub nat (add m n) (1 , 1)
ub/add m n = ub/intro (m + n) ‚â§-refl (ret (eq/intro refl))

data Tree : Set where
  leaf : val nat ‚Üí Tree
  node : Tree ‚Üí Tree ‚Üí Tree

tree : tp pos
tree = U (meta Tree)

sum : cmp (Œ† tree Œª _ ‚Üí F nat)
sum (leaf x)     = ret x
sum (node t‚ÇÅ t‚ÇÇ) =
  bind (F nat) (sum t‚ÇÅ & sum t‚ÇÇ) Œª (v‚ÇÅ , v‚ÇÇ) ‚Üí add v‚ÇÅ v‚ÇÇ

sum/cost : cmp (Œ† tree Œª _ ‚Üí cost)
sum/cost (leaf x)     = ùüò
sum/cost (node t‚ÇÅ t‚ÇÇ) = sum/cost t‚ÇÅ ‚äó sum/cost t‚ÇÇ ‚äï (1 , 1)

size : val tree ‚Üí val nat
size (leaf x)     = 0
size (node t‚ÇÅ t‚ÇÇ) = suc (size t‚ÇÅ + size t‚ÇÇ)

depth : val tree ‚Üí val nat
depth (leaf x)     = 0
depth (node t‚ÇÅ t‚ÇÇ) = suc (depth t‚ÇÅ ‚äî depth t‚ÇÇ)

sum/cost/closed : cmp (Œ† tree Œª _ ‚Üí cost)
sum/cost/closed t = size t , depth t

sum/cost‚â°sum/cost/closed : ‚àÄ t ‚Üí sum/cost t ‚â° sum/cost/closed t
sum/cost‚â°sum/cost/closed (leaf x)     = refl
sum/cost‚â°sum/cost/closed (node t‚ÇÅ t‚ÇÇ) =
  begin
    sum/cost (node t‚ÇÅ t‚ÇÇ)
  ‚â°‚ü®‚ü©
    sum/cost t‚ÇÅ ‚äó sum/cost t‚ÇÇ ‚äï (1 , 1)
  ‚â°‚ü® Eq.cong (_‚äï (1 , 1)) (Eq.cong‚ÇÇ _‚äó_ (sum/cost‚â°sum/cost/closed t‚ÇÅ) (sum/cost‚â°sum/cost/closed t‚ÇÇ)) ‚ü©
    (size t‚ÇÅ , depth t‚ÇÅ) ‚äó (size t‚ÇÇ , depth t‚ÇÇ) ‚äï (1 , 1)
  ‚â°‚ü®‚ü©
    size t‚ÇÅ + size t‚ÇÇ + 1 , depth t‚ÇÅ ‚äî depth t‚ÇÇ + 1
  ‚â°‚ü® Eq.cong‚ÇÇ _,_ (N.+-comm _ 1) (N.+-comm _ 1) ‚ü©
    suc (size t‚ÇÅ + size t‚ÇÇ) , suc (depth t‚ÇÅ ‚äî depth t‚ÇÇ)
  ‚â°‚ü®‚ü©
    sum/cost/closed (node t‚ÇÅ t‚ÇÇ)
  ‚àé
    where open ‚â°-Reasoning

sum‚â§sum/cost : ‚àÄ t ‚Üí ub (U (meta ‚Ñï)) (sum t) (sum/cost t)
sum‚â§sum/cost (leaf x)     = ub/ret
sum‚â§sum/cost (node t‚ÇÅ t‚ÇÇ) =
  ub/bind/const (sum/cost t‚ÇÅ ‚äó sum/cost t‚ÇÇ) (1 , 1) (ub/par (sum‚â§sum/cost t‚ÇÅ) (sum‚â§sum/cost t‚ÇÇ)) (Œª (v‚ÇÅ , v‚ÇÇ) ‚Üí ub/add v‚ÇÅ v‚ÇÇ)
