{-# OPTIONS --prop --rewriting #-}

module Examples.TreeSum where

open import Calf.CostMonoid
open import Calf.CostMonoids using (‚Ñï¬≤-ParCostMonoid)

parCostMonoid = ‚Ñï¬≤-ParCostMonoid
open ParCostMonoid parCostMonoid

open import Calf costMonoid
open import Calf.ParMetalanguage parCostMonoid
open import Calf.Types.Nat

open import Relation.Binary.PropositionalEquality as Eq using (_‚â°_; refl; _‚â¢_; module ‚â°-Reasoning)
open import Data.Nat as Nat using (_+_; _‚äî_)
open import Data.Nat.Properties as N using ()
open import Data.Product

add : cmp (Œ† nat Œª _ ‚Üí Œ† nat Œª _ ‚Üí F nat)
add m n = step (F nat) (1 , 1) (ret (m + n))

add/cost : cmp (Œ† nat Œª _ ‚Üí Œ† nat Œª _ ‚Üí cost)
add/cost m n = (1 , 1) ‚äï ùüò

add/cost/closed : cmp (Œ† nat Œª _ ‚Üí Œ† nat Œª _ ‚Üí cost)
add/cost/closed m n = (1 , 1)

add/cost‚â§add/cost/closed : ‚àÄ m n ‚Üí ‚óØ (add/cost m n ‚â§ add/cost/closed m n)
add/cost‚â§add/cost/closed m n u = ‚â§-reflexive (‚äï-identity ≥ (1 , 1))

add‚â§add/cost : ‚àÄ m n ‚Üí IsBounded nat (add m n) (add/cost m n)
add‚â§add/cost m n = bound/step (1 , 1) _ bound/ret

add‚â§add/cost/closed : ‚àÄ m n ‚Üí IsBounded nat (add m n) (add/cost/closed m n)
add‚â§add/cost/closed m n = bound/relax (add/cost‚â§add/cost/closed m n) (add‚â§add/cost m n)


data Tree : Set where
  leaf : val nat ‚Üí Tree
  node : Tree ‚Üí Tree ‚Üí Tree

tree : tp pos
tree = U (meta Tree)

sum : cmp (Œ† tree Œª _ ‚Üí F nat)
sum (leaf x)     = ret x
sum (node t‚ÇÅ t‚ÇÇ) =
  bind (F nat) (sum t‚ÇÅ & sum t‚ÇÇ) Œª (n‚ÇÅ , n‚ÇÇ) ‚Üí
    add n‚ÇÅ n‚ÇÇ

sum/total : ‚àÄ t ‚Üí ‚óØ (‚àÉ Œª n ‚Üí sum t ‚â° ret n)
sum/total (leaf x)     u = x , refl
sum/total (node t‚ÇÅ t‚ÇÇ) u =
  let (n‚ÇÅ , ‚â°‚ÇÅ) = sum/total t‚ÇÅ u
      (n‚ÇÇ , ‚â°‚ÇÇ) = sum/total t‚ÇÇ u
  in
  n‚ÇÅ + n‚ÇÇ , (
    let open ‚â°-Reasoning in
    begin
      (bind (F nat) (sum t‚ÇÅ & sum t‚ÇÇ) Œª (n‚ÇÅ , n‚ÇÇ) ‚Üí
        add n‚ÇÅ n‚ÇÇ)
    ‚â°‚ü® Eq.cong‚ÇÇ (Œª e‚ÇÅ e‚ÇÇ ‚Üí bind (F nat) (e‚ÇÅ & e‚ÇÇ) _) ‚â°‚ÇÅ ‚â°‚ÇÇ ‚ü©
      add n‚ÇÅ n‚ÇÇ
    ‚â°‚ü®‚ü©
      step (F nat) (1 , 1) (ret (n‚ÇÅ + n‚ÇÇ))
    ‚â°‚ü® step/ext (F nat) _ (1 , 1) u ‚ü©
      ret (n‚ÇÅ + n‚ÇÇ)
    ‚àé
  )

sum/cost : cmp (Œ† tree Œª _ ‚Üí cost)
sum/cost (leaf x)     = ùüò
sum/cost (node t‚ÇÅ t‚ÇÇ) =
  bind cost (sum t‚ÇÅ & sum t‚ÇÇ) Œª (n‚ÇÅ , n‚ÇÇ) ‚Üí (sum/cost t‚ÇÅ ‚äó sum/cost t‚ÇÇ) ‚äï
    add/cost/closed n‚ÇÅ n‚ÇÇ

size : val tree ‚Üí val nat
size (leaf x)     = 0
size (node t‚ÇÅ t‚ÇÇ) = suc (size t‚ÇÅ + size t‚ÇÇ)

depth : val tree ‚Üí val nat
depth (leaf x)     = 0
depth (node t‚ÇÅ t‚ÇÇ) = suc (depth t‚ÇÅ ‚äî depth t‚ÇÇ)

sum/cost/closed : cmp (Œ† tree Œª _ ‚Üí cost)
sum/cost/closed t = size t , depth t

sum/cost‚â§sum/cost/closed : ‚àÄ t ‚Üí ‚óØ (sum/cost t ‚â§ sum/cost/closed t)
sum/cost‚â§sum/cost/closed (leaf x)     u = ‚â§-refl
sum/cost‚â§sum/cost/closed (node t‚ÇÅ t‚ÇÇ) u =
  let (_ , ‚â°‚ÇÅ) = sum/total t‚ÇÅ u
      (_ , ‚â°‚ÇÇ) = sum/total t‚ÇÇ u
  in
  begin
    sum/cost (node t‚ÇÅ t‚ÇÇ)
  ‚â°‚ü®‚ü©
    (bind cost (sum t‚ÇÅ & sum t‚ÇÇ) Œª (n‚ÇÅ , n‚ÇÇ) ‚Üí (sum/cost t‚ÇÅ ‚äó sum/cost t‚ÇÇ) ‚äï
      add/cost/closed n‚ÇÅ n‚ÇÇ)
  ‚â°‚ü® Eq.cong‚ÇÇ (Œª e‚ÇÅ e‚ÇÇ ‚Üí bind cost (e‚ÇÅ & e‚ÇÇ) Œª (n‚ÇÅ , n‚ÇÇ) ‚Üí (sum/cost t‚ÇÅ ‚äó sum/cost t‚ÇÇ) ‚äï _) ‚â°‚ÇÅ ‚â°‚ÇÇ ‚ü©
    sum/cost t‚ÇÅ ‚äó sum/cost t‚ÇÇ ‚äï (1 , 1)
  ‚â§‚ü® ‚äï-monoÀ°-‚â§ (1 , 1) (‚äó-mono-‚â§ (sum/cost‚â§sum/cost/closed t‚ÇÅ u) (sum/cost‚â§sum/cost/closed t‚ÇÇ u)) ‚ü©
    sum/cost/closed t‚ÇÅ ‚äó sum/cost/closed t‚ÇÇ ‚äï (1 , 1)
  ‚â°‚ü®‚ü©
    (size t‚ÇÅ , depth t‚ÇÅ) ‚äó (size t‚ÇÇ , depth t‚ÇÇ) ‚äï (1 , 1)
  ‚â°‚ü®‚ü©
    size t‚ÇÅ + size t‚ÇÇ + 1 , depth t‚ÇÅ ‚äî depth t‚ÇÇ + 1
  ‚â°‚ü® Eq.cong‚ÇÇ _,_ (N.+-comm _ 1) (N.+-comm _ 1) ‚ü©
    suc (size t‚ÇÅ + size t‚ÇÇ) , suc (depth t‚ÇÅ ‚äî depth t‚ÇÇ)
  ‚â°‚ü®‚ü©
    sum/cost/closed (node t‚ÇÅ t‚ÇÇ)
  ‚àé
    where open ‚â§-Reasoning

sum‚â§sum/cost : ‚àÄ t ‚Üí IsBounded nat (sum t) (sum/cost t)
sum‚â§sum/cost (leaf x)     = bound/ret
sum‚â§sum/cost (node t‚ÇÅ t‚ÇÇ) =
  bound/bind (sum/cost t‚ÇÅ ‚äó sum/cost t‚ÇÇ) _ (bound/par (sum‚â§sum/cost t‚ÇÅ) (sum‚â§sum/cost t‚ÇÇ)) Œª (n‚ÇÅ , n‚ÇÇ) ‚Üí
    add‚â§add/cost/closed n‚ÇÅ n‚ÇÇ

sum‚â§sum/cost/closed : ‚àÄ t ‚Üí IsBounded nat (sum t) (sum/cost/closed t)
sum‚â§sum/cost/closed t = bound/relax (sum/cost‚â§sum/cost/closed t) (sum‚â§sum/cost t)
