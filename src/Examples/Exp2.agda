{-# OPTIONS --prop --rewriting #-}

module Examples.Exp2 where

open import Calf.CostMonoid using (ParCostMonoid)
open import Calf.CostMonoids using (‚Ñï¬≤-ParCostMonoid)

parCostMonoid = ‚Ñï¬≤-ParCostMonoid
open ParCostMonoid parCostMonoid renaming (zero to ùüò; _+_ to ‚äï)

open import Calf.Prelude
open import Calf.ParMetalanguage parCostMonoid
open import Calf.PhaseDistinction costMonoid
open import Calf.Types.Bool costMonoid

open import Relation.Binary.PropositionalEquality as Eq using (_‚â°_; refl; module ‚â°-Reasoning)
open import Data.Nat as Nat
open import Data.Nat.Properties as N using (module ‚â§-Reasoning)

Correct : cmp (Œ† (U (meta ‚Ñï)) Œª _ ‚Üí F (U (meta ‚Ñï))) ‚Üí Set
Correct exp‚ÇÇ = (n : ‚Ñï) ‚Üí ‚óØ (exp‚ÇÇ n ‚â° ret (2 ^ n))

exp‚ÇÇ-slow : cmp (Œ† (U (meta ‚Ñï)) Œª _ ‚Üí F (U (meta ‚Ñï)))
exp‚ÇÇ-slow zero = ret (suc zero)
exp‚ÇÇ-slow (suc n) = bind (F (U (meta ‚Ñï))) (exp‚ÇÇ-slow n & exp‚ÇÇ-slow n) Œª (r‚ÇÅ , r‚ÇÇ) ‚Üí
  step' (F (U (meta ‚Ñï))) (1 , 1) (ret (r‚ÇÅ + r‚ÇÇ))

lemma/2^suc : ‚àÄ n ‚Üí 2 ^ n + 2 ^ n ‚â° 2 ^ suc n
lemma/2^suc n =
  begin
    2 ^ n + 2 ^ n
  ‚â°Àò‚ü® Eq.cong ((2 ^ n) +_) (N.*-identityÀ° (2 ^ n)) ‚ü©
    2 ^ n + (2 ^ n + 0)
  ‚â°‚ü®‚ü©
    2 ^ n + (2 ^ n + 0 * (2 ^ n))
  ‚â°‚ü®‚ü©
    2 * (2 ^ n)
  ‚â°‚ü®‚ü©
    2 ^ suc n
  ‚àé
    where open ‚â°-Reasoning

exp‚ÇÇ-slow/correct : Correct exp‚ÇÇ-slow
exp‚ÇÇ-slow/correct zero    u = refl
exp‚ÇÇ-slow/correct (suc n) u =
  begin
    exp‚ÇÇ-slow (suc n)
  ‚â°‚ü®‚ü©
    (bind (F (U (meta ‚Ñï))) (exp‚ÇÇ-slow n & exp‚ÇÇ-slow n) Œª (r‚ÇÅ , r‚ÇÇ) ‚Üí
      step' (F (U (meta ‚Ñï))) (1 , 1) (ret (r‚ÇÅ + r‚ÇÇ)))
  ‚â°‚ü® Eq.cong (bind (F (U (meta ‚Ñï))) (exp‚ÇÇ-slow n & exp‚ÇÇ-slow n)) (funext (Œª (r‚ÇÅ , r‚ÇÇ) ‚Üí step'/ext (F (U (meta ‚Ñï))) _ (1 , 1) u)) ‚ü©
    (bind (F (U (meta ‚Ñï))) (exp‚ÇÇ-slow n & exp‚ÇÇ-slow n) Œª (r‚ÇÅ , r‚ÇÇ) ‚Üí
      ret (r‚ÇÅ + r‚ÇÇ))
  ‚â°‚ü® Eq.cong (Œª e ‚Üí bind (F (U (meta ‚Ñï))) (e & e) _) (exp‚ÇÇ-slow/correct n u) ‚ü©
    (bind (F (U (meta ‚Ñï))) (ret {U (meta ‚Ñï)} (2 ^ n) & ret {U (meta ‚Ñï)} (2 ^ n)) Œª (r‚ÇÅ , r‚ÇÇ) ‚Üí
      ret (r‚ÇÅ + r‚ÇÇ))
  ‚â°‚ü® bind/par {p‚ÇÅ = ùüò} {p‚ÇÇ = ùüò} ‚ü©
    step' (F (U (meta ‚Ñï))) (ùüò ‚äó ùüò) (ret (2 ^ n + 2 ^ n))
  ‚â°‚ü®‚ü©
    ret (2 ^ n + 2 ^ n)
  ‚â°‚ü® Eq.cong ret (lemma/2^suc n) ‚ü©
    ret (2 ^ suc n)
  ‚àé
    where open ‚â°-Reasoning

exp‚ÇÇ-fast : cmp (Œ† (U (meta ‚Ñï)) Œª _ ‚Üí F (U (meta ‚Ñï)))
exp‚ÇÇ-fast zero = ret (suc zero)
exp‚ÇÇ-fast (suc n) = bind (F (U (meta ‚Ñï))) (exp‚ÇÇ-fast n) Œª r ‚Üí
  step' (F (U (meta ‚Ñï))) (1 , 1) (ret (r + r))

exp‚ÇÇ-fast/correct : Correct exp‚ÇÇ-fast
exp‚ÇÇ-fast/correct zero    u = refl
exp‚ÇÇ-fast/correct (suc n) u =
  begin
    exp‚ÇÇ-fast (suc n)
  ‚â°‚ü®‚ü©
    (bind (F (U (meta ‚Ñï))) (exp‚ÇÇ-fast n) Œª r ‚Üí
      step' (F (U (meta ‚Ñï))) (1 , 1) (ret (r + r)))
  ‚â°‚ü® Eq.cong (bind (F (U (meta ‚Ñï))) (exp‚ÇÇ-fast n)) (funext (Œª r ‚Üí step'/ext (F (U (meta ‚Ñï))) _ (1 , 1) u)) ‚ü©
    (bind (F (U (meta ‚Ñï))) (exp‚ÇÇ-fast n) Œª r ‚Üí
      ret (r + r))
  ‚â°‚ü® Eq.cong (Œª e ‚Üí bind (F (U (meta ‚Ñï))) e _) (exp‚ÇÇ-fast/correct n u) ‚ü©
    (bind (F (U (meta ‚Ñï))) (ret {U (meta ‚Ñï)} (2 ^ n)) Œª r ‚Üí
      ret (r + r))
  ‚â°‚ü®‚ü©
    ret (2 ^ n + 2 ^ n)
  ‚â°‚ü® Eq.cong ret (lemma/2^suc n) ‚ü©
    ret (2 ^ suc n)
  ‚àé
    where open ‚â°-Reasoning
