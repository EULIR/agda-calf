{-# OPTIONS --prop --rewriting #-}

module Examples.Exp2 where

open import Calf.CostMonoid
open import Calf.CostMonoids using (‚Ñï¬≤-ParCostMonoid)

parCostMonoid = ‚Ñï¬≤-ParCostMonoid
open ParCostMonoid parCostMonoid

open import Calf costMonoid
open import Calf.ParMetalanguage parCostMonoid
open import Calf.Types.Bool
open import Calf.Types.Nat
open import Calf.Types.Bounded costMonoid

open import Relation.Binary.PropositionalEquality as Eq using (_‚â°_; refl; _‚â¢_; module ‚â°-Reasoning)
open import Data.Nat as Nat
open import Data.Nat.Properties as N using (module ‚â§-Reasoning)
open import Data.Product
open import Data.Empty

Correct : cmp (Œ† nat Œª _ ‚Üí F nat) ‚Üí Set
Correct exp‚ÇÇ = (n : ‚Ñï) ‚Üí ‚óØ (exp‚ÇÇ n ‚â° ret (2 ^ n))

lemma/2^suc : ‚àÄ n ‚Üí 2 ^ n + 2 ^ n ‚â° 2 ^ suc n
lemma/2^suc n =
  begin
    2 ^ n + 2 ^ n
  ‚â°Àò‚ü® Eq.cong ((2 ^ n) +_) (N.*-identityÀ° (2 ^ n)) ‚ü©
    2 ^ n + (2 ^ n + 0)
  ‚â°‚ü®‚ü©
    2 ^ n + (2 ^ n + 0 * (2 ^ n))
  ‚â°‚ü®‚ü©
    2 * (2 ^ n)
  ‚â°‚ü®‚ü©
    2 ^ suc n
  ‚àé
    where open ‚â°-Reasoning

module Slow where
  exp‚ÇÇ : cmp (Œ† nat Œª _ ‚Üí F nat)
  exp‚ÇÇ zero = ret (suc zero)
  exp‚ÇÇ (suc n) =
    bind (F nat) (exp‚ÇÇ n & exp‚ÇÇ n) Œª (r‚ÇÅ , r‚ÇÇ) ‚Üí
      step (F nat) (1 , 1) (ret (r‚ÇÅ + r‚ÇÇ))

  exp‚ÇÇ/correct : Correct exp‚ÇÇ
  exp‚ÇÇ/correct zero    u = refl
  exp‚ÇÇ/correct (suc n) u =
    begin
      exp‚ÇÇ (suc n)
    ‚â°‚ü®‚ü©
      (bind (F nat) (exp‚ÇÇ n & exp‚ÇÇ n) Œª (r‚ÇÅ , r‚ÇÇ) ‚Üí
        step (F nat) (1 , 1) (ret (r‚ÇÅ + r‚ÇÇ)))
    ‚â°‚ü® Eq.cong (bind (F nat) (exp‚ÇÇ n & exp‚ÇÇ n)) (funext (Œª (r‚ÇÅ , r‚ÇÇ) ‚Üí step/ext (F nat) _ (1 , 1) u)) ‚ü©
      (bind (F nat) (exp‚ÇÇ n & exp‚ÇÇ n) Œª (r‚ÇÅ , r‚ÇÇ) ‚Üí
        ret (r‚ÇÅ + r‚ÇÇ))
    ‚â°‚ü® Eq.cong (Œª e ‚Üí bind (F nat) (e & e) _) (exp‚ÇÇ/correct n u) ‚ü©
      step (F nat) (ùüò ‚äó ùüò) (ret (2 ^ n + 2 ^ n))
    ‚â°‚ü®‚ü©
      ret (2 ^ n + 2 ^ n)
    ‚â°‚ü® Eq.cong ret (lemma/2^suc n) ‚ü©
      ret (2 ^ suc n)
    ‚àé
      where open ‚â°-Reasoning

  exp‚ÇÇ/cost : cmp (Œ† nat Œª _ ‚Üí cost)
  exp‚ÇÇ/cost zero    = ùüò
  exp‚ÇÇ/cost (suc n) = exp‚ÇÇ/cost n ‚äó exp‚ÇÇ/cost n ‚äï ((1 , 1) ‚äï ùüò)

  exp‚ÇÇ/cost/closed : cmp (Œ† nat Œª _ ‚Üí cost)
  exp‚ÇÇ/cost/closed n = pred (2 ^ n) , n

  exp‚ÇÇ/cost‚â°exp‚ÇÇ/cost/closed : ‚àÄ n ‚Üí exp‚ÇÇ/cost n ‚â° exp‚ÇÇ/cost/closed n
  exp‚ÇÇ/cost‚â°exp‚ÇÇ/cost/closed zero    = refl
  exp‚ÇÇ/cost‚â°exp‚ÇÇ/cost/closed (suc n) =
    begin
      exp‚ÇÇ/cost (suc n)
    ‚â°‚ü®‚ü©
      exp‚ÇÇ/cost n ‚äó exp‚ÇÇ/cost n ‚äï ((1 , 1) ‚äï ùüò)
    ‚â°‚ü® Eq.cong (Œª c ‚Üí c ‚äó c ‚äï ((1 , 1) ‚äï ùüò)) (exp‚ÇÇ/cost‚â°exp‚ÇÇ/cost/closed n) ‚ü©
      exp‚ÇÇ/cost/closed n ‚äó exp‚ÇÇ/cost/closed n ‚äï ((1 , 1) ‚äï ùüò)
    ‚â°‚ü® Eq.cong (Œª m ‚Üí exp‚ÇÇ/cost/closed n ‚äó exp‚ÇÇ/cost/closed n ‚äï m) (‚äï-identity ≥ _) ‚ü©
      exp‚ÇÇ/cost/closed n ‚äó exp‚ÇÇ/cost/closed n ‚äï (1 , 1)
    ‚â°‚ü®
      Eq.cong‚ÇÇ _,_
        (begin
          proj‚ÇÅ (exp‚ÇÇ/cost/closed n ‚äó exp‚ÇÇ/cost/closed n ‚äï (1 , 1))
        ‚â°‚ü®‚ü©
          proj‚ÇÅ (exp‚ÇÇ/cost/closed n) + proj‚ÇÅ (exp‚ÇÇ/cost/closed n) + 1
        ‚â°‚ü® N.+-comm _ 1 ‚ü©
          suc (proj‚ÇÅ (exp‚ÇÇ/cost/closed n) + proj‚ÇÅ (exp‚ÇÇ/cost/closed n))
        ‚â°‚ü®‚ü©
          suc (pred (2 ^ n) + pred (2 ^ n))
        ‚â°Àò‚ü® N.+-suc (pred (2 ^ n)) (pred (2 ^ n)) ‚ü©
          pred (2 ^ n) + suc (pred (2 ^ n))
        ‚â°‚ü® Eq.cong (pred (2 ^ n) +_) (N.suc[pred[n]]‚â°n (lemma/2^n‚â¢0 n)) ‚ü©
          pred (2 ^ n) + 2 ^ n
        ‚â°‚ü® lemma/pred-+ (2 ^ n) (2 ^ n) (lemma/2^n‚â¢0 n) ‚ü©
          pred (2 ^ n + 2 ^ n)
        ‚â°‚ü® Eq.cong pred (lemma/2^suc n) ‚ü©
          pred (2 ^ suc n)
        ‚â°‚ü®‚ü©
          proj‚ÇÅ (exp‚ÇÇ/cost/closed (suc n))
        ‚àé)
        (begin
          proj‚ÇÇ (exp‚ÇÇ/cost/closed n ‚äó exp‚ÇÇ/cost/closed n ‚äï (1 , 1))
        ‚â°‚ü®‚ü©
          proj‚ÇÇ (exp‚ÇÇ/cost/closed n) ‚äî proj‚ÇÇ (exp‚ÇÇ/cost/closed n) + 1
        ‚â°‚ü®‚ü©
          n ‚äî n + 1
        ‚â°‚ü® Eq.cong (_+ 1) (N.‚äî-idem n) ‚ü©
          n + 1
        ‚â°‚ü® N.+-comm _ 1 ‚ü©
          suc n
        ‚â°‚ü®‚ü©
          proj‚ÇÇ (exp‚ÇÇ/cost/closed (suc n))
        ‚àé)
      ‚ü©
        exp‚ÇÇ/cost/closed (suc n)
      ‚àé
      where
        open ‚â°-Reasoning

        lemma/2^n‚â¢0 : ‚àÄ n ‚Üí 2 ^ n ‚â¢ zero
        lemma/2^n‚â¢0 n 2^n‚â°0 with N.m^n‚â°0‚áím‚â°0 2 n 2^n‚â°0
        ... | ()

        lemma/pred-+ : ‚àÄ m n ‚Üí m ‚â¢ zero ‚Üí pred m + n ‚â° pred (m + n)
        lemma/pred-+ zero    n m‚â¢zero = ‚ä•-elim (m‚â¢zero refl)
        lemma/pred-+ (suc m) n m‚â¢zero = refl

  exp‚ÇÇ‚â§exp‚ÇÇ/cost : ‚àÄ n ‚Üí IsBounded nat (exp‚ÇÇ n) (exp‚ÇÇ/cost n)
  exp‚ÇÇ‚â§exp‚ÇÇ/cost zero    = bound/ret
  exp‚ÇÇ‚â§exp‚ÇÇ/cost (suc n) =
    bound/bind/const (exp‚ÇÇ/cost n ‚äó exp‚ÇÇ/cost n) ((1 , 1) ‚äï ùüò) (bound/par (exp‚ÇÇ‚â§exp‚ÇÇ/cost n) (exp‚ÇÇ‚â§exp‚ÇÇ/cost n)) Œª (r‚ÇÅ , r‚ÇÇ) ‚Üí
      bound/step (1 , 1) ùüò bound/ret

module Fast where

  exp‚ÇÇ : cmp (Œ† nat Œª _ ‚Üí F nat)
  exp‚ÇÇ zero = ret (suc zero)
  exp‚ÇÇ (suc n) =
    bind (F nat) (exp‚ÇÇ n) Œª r ‚Üí
      step (F nat) (1 , 1) (ret (r + r))

  exp‚ÇÇ/correct : Correct exp‚ÇÇ
  exp‚ÇÇ/correct zero    u = refl
  exp‚ÇÇ/correct (suc n) u =
    begin
      exp‚ÇÇ (suc n)
    ‚â°‚ü®‚ü©
      (bind (F nat) (exp‚ÇÇ n) Œª r ‚Üí
        step (F nat) (1 , 1) (ret (r + r)))
    ‚â°‚ü® Eq.cong (bind (F nat) (exp‚ÇÇ n)) (funext (Œª r ‚Üí step/ext (F nat) _ (1 , 1) u)) ‚ü©
      (bind (F nat) (exp‚ÇÇ n) Œª r ‚Üí
        ret (r + r))
    ‚â°‚ü® Eq.cong (Œª e ‚Üí bind (F nat) e _) (exp‚ÇÇ/correct n u) ‚ü©
      (bind (F nat) (ret {nat} (2 ^ n)) Œª r ‚Üí
        ret (r + r))
    ‚â°‚ü®‚ü©
      ret (2 ^ n + 2 ^ n)
    ‚â°‚ü® Eq.cong ret (lemma/2^suc n) ‚ü©
      ret (2 ^ suc n)
    ‚àé
      where open ‚â°-Reasoning

  exp‚ÇÇ/cost : cmp (Œ† nat Œª _ ‚Üí cost)
  exp‚ÇÇ/cost zero    = ùüò
  exp‚ÇÇ/cost (suc n) = exp‚ÇÇ/cost n ‚äï ((1 , 1) ‚äï ùüò)

  exp‚ÇÇ/cost/closed : cmp (Œ† nat Œª _ ‚Üí cost)
  exp‚ÇÇ/cost/closed n = n , n

  exp‚ÇÇ/cost‚â°exp‚ÇÇ/cost/closed : ‚àÄ n ‚Üí exp‚ÇÇ/cost n ‚â° exp‚ÇÇ/cost/closed n
  exp‚ÇÇ/cost‚â°exp‚ÇÇ/cost/closed zero    = refl
  exp‚ÇÇ/cost‚â°exp‚ÇÇ/cost/closed (suc n) =
    begin
      exp‚ÇÇ/cost (suc n)
    ‚â°‚ü®‚ü©
      exp‚ÇÇ/cost n ‚äï ((1 , 1) ‚äï ùüò)
    ‚â°‚ü® Eq.cong (Œª c ‚Üí c ‚äï ((1 , 1) ‚äï ùüò)) (exp‚ÇÇ/cost‚â°exp‚ÇÇ/cost/closed n) ‚ü©
      exp‚ÇÇ/cost/closed n ‚äï ((1 , 1) ‚äï ùüò)
    ‚â°‚ü® Eq.cong (exp‚ÇÇ/cost/closed n ‚äï_) (‚äï-identity ≥ _) ‚ü©
      exp‚ÇÇ/cost/closed n ‚äï (1 , 1)
    ‚â°‚ü® Eq.cong‚ÇÇ _,_ (N.+-comm _ 1) (N.+-comm _ 1) ‚ü©
      exp‚ÇÇ/cost/closed (suc n)
    ‚àé
      where open ‚â°-Reasoning

  exp‚ÇÇ‚â§exp‚ÇÇ/cost : ‚àÄ n ‚Üí IsBounded nat (exp‚ÇÇ n) (exp‚ÇÇ/cost n)
  exp‚ÇÇ‚â§exp‚ÇÇ/cost zero    = bound/ret
  exp‚ÇÇ‚â§exp‚ÇÇ/cost (suc n) =
    bound/bind/const (exp‚ÇÇ/cost n) ((1 , 1) ‚äï ùüò) (exp‚ÇÇ‚â§exp‚ÇÇ/cost n) Œª r ‚Üí
      bound/step (1 , 1) ùüò bound/ret

slow‚â°fast : ‚óØ (Slow.exp‚ÇÇ ‚â° Fast.exp‚ÇÇ)
slow‚â°fast u = funext Œª n ‚Üí
  begin
    Slow.exp‚ÇÇ n
  ‚â°‚ü® Slow.exp‚ÇÇ/correct n u ‚ü©
    ret (2 ^ n)
  ‚â°Àò‚ü® Fast.exp‚ÇÇ/correct n u ‚ü©
    Fast.exp‚ÇÇ n
  ‚àé
    where open ‚â°-Reasoning
