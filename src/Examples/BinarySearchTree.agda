{-# OPTIONS --prop --rewriting #-}

module Examples.BinarySearchTree where

open import Calf.CostMonoid
open import Calf.CostMonoids using (‚Ñï¬≤-ParCostMonoid)

parCostMonoid = ‚Ñï¬≤-ParCostMonoid
open ParCostMonoid parCostMonoid

open import Level using (0‚Ñì)

open import Calf costMonoid
open import Calf.ParMetalanguage parCostMonoid
open import Calf.Types.Unit
open import Calf.Types.Product
open import Calf.Types.Sum
open import Calf.Types.Bool
open import Calf.Types.Maybe
open import Calf.Types.Nat
open import Calf.Types.List
open import Data.String using (String)
open import Data.Nat as Nat using (_+_; _*_; _<_; _>_; _‚â§·µá_; _<·µá_; ‚åä_/2‚åã; _‚â°·µá_; _‚â•_)
open import Data.Bool as Bool using (not; _‚àß_)
import Data.Nat.Properties as Nat

open import Function

open import Relation.Nullary
open import Relation.Nullary.Negation using (contradiction)
open import Relation.Binary
open import Relation.Binary.PropositionalEquality as Eq using (_‚â°_; refl; _‚â¢_; module ‚â°-Reasoning; ‚â¢-sym)

variable
  A B C : tp pos
  X Y Z : tp neg
  P Q : val A ‚Üí tp neg


record ParametricBST (Key : StrictTotalOrder 0‚Ñì 0‚Ñì 0‚Ñì) : Set‚ÇÅ where
  open StrictTotalOrder Key

  ùïÇ : tp pos
  ùïÇ = U (meta (StrictTotalOrder.Carrier Key))

  field
    bst : tp pos

    leaf : cmp (F bst)
    node : cmp (Œ† bst Œª t‚ÇÅ ‚Üí Œ† ùïÇ Œª k ‚Üí Œ† bst Œª t‚ÇÇ ‚Üí F bst)

    rec :
      cmp
        ( Œ† (U X) Œª _ ‚Üí
          Œ† (U (Œ† bst Œª _ ‚Üí Œ† (U X) Œª _ ‚Üí Œ† ùïÇ Œª _ ‚Üí Œ† bst Œª _ ‚Üí Œ† (U X) Œª _ ‚Üí X)) Œª _ ‚Üí
          Œ† bst Œª _ ‚Üí X
        )

  empty : cmp (F bst)
  empty = leaf

  singleton : cmp (Œ† ùïÇ Œª _ ‚Üí F bst)
  singleton k =
    bind (F bst) empty Œª t ‚Üí
    node t k t

  Split : tp neg
  Split = F (prod‚Å∫ bst (prod‚Å∫ (maybe ùïÇ) bst))

  split : cmp (Œ† bst Œª _ ‚Üí Œ† ùïÇ Œª _ ‚Üí Split)
  split t k =
    rec
      {X = F (prod‚Å∫ bst (prod‚Å∫ (maybe ùïÇ) bst))}
      (bind Split empty Œª t ‚Üí
        ret (t , nothing , t))
      (Œª t‚ÇÅ ih‚ÇÅ k' t‚ÇÇ ih‚ÇÇ ‚Üí
        case compare k k' of Œª
          { (tri< k<k' ¬¨k‚â°k' ¬¨k>k') ‚Üí
              bind Split ih‚ÇÅ Œª ( t‚ÇÅ‚ÇÅ , k? , t‚ÇÅ‚ÇÇ ) ‚Üí
              bind Split (node t‚ÇÅ‚ÇÇ k' t‚ÇÇ) Œª t ‚Üí
              ret (t‚ÇÅ‚ÇÅ , k? , t)
          ; (tri‚âà ¬¨k<k' k‚â°k' ¬¨k>k') ‚Üí ret (t‚ÇÅ , just k' , t‚ÇÇ)
          ; (tri> ¬¨k<k' ¬¨k‚â°k' k>k') ‚Üí
              bind Split ih‚ÇÇ Œª ( t‚ÇÇ‚ÇÅ , k? , t‚ÇÇ‚ÇÇ ) ‚Üí
              bind Split (node t‚ÇÅ k' t‚ÇÇ‚ÇÅ) Œª t ‚Üí
              ret (t , k? , t‚ÇÇ‚ÇÇ)
          })
      t

  find : cmp (Œ† bst Œª _ ‚Üí Œ† ùïÇ Œª _ ‚Üí F (maybe ùïÇ))
  find t k = bind (F (maybe ùïÇ)) (split t k) Œª { (_ , k? , _) ‚Üí ret k? }

  insert : cmp (Œ† bst Œª _ ‚Üí Œ† ùïÇ Œª _ ‚Üí F bst)
  insert t k = bind (F bst) (split t k) Œª { (t‚ÇÅ , _ , t‚ÇÇ) ‚Üí node t‚ÇÅ k t‚ÇÇ }


ListBST : (Key : StrictTotalOrder 0‚Ñì 0‚Ñì 0‚Ñì) ‚Üí ParametricBST Key
ListBST Key =
  record
    { bst = list ùïÇ
    ; leaf = ret []
    ; node =
        Œª l‚ÇÅ k l‚ÇÇ ‚Üí
          let n = length l‚ÇÅ + 1 + length l‚ÇÇ in
          step (F (list ùïÇ)) (n , n) (ret (l‚ÇÅ ++ [ k ] ++ l‚ÇÇ))
    ; rec = Œª {X} ‚Üí rec {X}
    }
  where
    ùïÇ : tp pos
    ùïÇ = U (meta (StrictTotalOrder.Carrier Key))

    rec : {X : tp neg} ‚Üí
      cmp
        ( Œ† (U X) Œª _ ‚Üí
          Œ† (U (Œ† (list ùïÇ) Œª _ ‚Üí Œ† (U X) Œª _ ‚Üí Œ† ùïÇ Œª _ ‚Üí Œ† (list ùïÇ) Œª _ ‚Üí Œ† (U X) Œª _ ‚Üí X)) Œª _ ‚Üí
          Œ† (list ùïÇ) Œª _ ‚Üí X
        )
    rec {X} z f []      = z
    rec {X} z f (x ‚à∑ l) = step X (1 , 1) (f [] z x l (rec {X} z f l))

RedBlackBST : (Key : StrictTotalOrder 0‚Ñì 0‚Ñì 0‚Ñì) ‚Üí ParametricBST Key
RedBlackBST Key =
  record
    { bst = rbt
    ; leaf = ret ‚ü™ leaf ‚ü´
    ; node = joinMid
    ; rec = Œª {X} ‚Üí rec {X}
    }
  where
    ùïÇ : tp pos
    ùïÇ = U (meta (StrictTotalOrder.Carrier Key))

    data Color : Set where
      red : Color
      black : Color
    color : tp pos
    color = U (meta Color)

    -- Indexed Red Black Tree
    data IRBT : val color ‚Üí val nat ‚Üí Set where
      leaf  : IRBT black zero
      red   : {n : val nat}
        (t‚ÇÅ : IRBT black n) (k : val ùïÇ) (t‚ÇÇ : IRBT black n)
        ‚Üí IRBT red n
      black : {n : val nat} {y‚ÇÅ y‚ÇÇ : val color}
        (t‚ÇÅ : IRBT y‚ÇÅ n) (k : val ùïÇ) (t‚ÇÇ : IRBT y‚ÇÇ n)
        ‚Üí IRBT black (suc n)
    irbt : val color ‚Üí val nat ‚Üí tp pos
    irbt y n = U (meta (IRBT y n))

    data HiddenRBT : val nat ‚Üí Set where
      redhd : {n : val nat} ‚Üí IRBT red n ‚Üí HiddenRBT n
      blackhd : {n : val nat} ‚Üí IRBT black n ‚Üí HiddenRBT n
    hrbt : val nat ‚Üí tp pos
    hrbt n = U (meta (HiddenRBT n))

    data AlmostRightRBT : val nat ‚Üí Set where
      redat :   {n : val nat} { c1 : val color}
              ‚Üí IRBT black n ‚Üí val ùïÇ ‚Üí IRBT c1 n
              ‚Üí AlmostRightRBT n
      blackat : {n : val nat} { c1 c2 : val color}
              ‚Üí IRBT c1 n ‚Üí val ùïÇ ‚Üí IRBT c2 n
              ‚Üí AlmostRightRBT (suc n)
    arrbt : val nat ‚Üí tp pos
    arrbt n = U (meta (AlmostRightRBT n))

    joinEqual : cmp (
                       Œ† nat Œª n‚ÇÅ ‚Üí Œ† (irbt black (suc n‚ÇÅ)) Œª _ ‚Üí
                       Œ† ùïÇ Œª _ ‚Üí
                       Œ† color Œª y‚ÇÇ ‚Üí Œ† (irbt y‚ÇÇ n‚ÇÅ) Œª _ ‚Üí
                       F (hrbt (suc n‚ÇÅ))
                    )
    joinEqual .zero (black t‚ÇÅ k‚ÇÅ leaf) k .black leaf = ret (blackhd (black t‚ÇÅ k‚ÇÅ (red leaf k leaf)))
    joinEqual .zero (black t‚ÇÅ k‚ÇÅ leaf) k .red (red t‚ÇÇ k‚ÇÇ t‚ÇÉ) = ret (redhd (red (black t‚ÇÅ k‚ÇÅ leaf) k (black t‚ÇÇ k‚ÇÇ t‚ÇÉ))) --rotate
    joinEqual .zero (black t‚ÇÅ k‚ÇÅ (red t‚ÇÉ k‚ÇÇ t‚ÇÑ)) k .black leaf = ret (redhd (red (black t‚ÇÅ k‚ÇÅ t‚ÇÉ) k‚ÇÇ (black t‚ÇÑ k leaf))) --rotate
    joinEqual n‚ÇÅ (black t‚ÇÅ k‚ÇÅ (red t‚ÇÉ k‚ÇÇ t‚ÇÑ)) k .red (red t‚ÇÇ k‚ÇÉ t‚ÇÖ) = ret (redhd (red (black t‚ÇÅ k‚ÇÅ t‚ÇÉ) k‚ÇÇ (black t‚ÇÑ k (red t‚ÇÇ k‚ÇÉ t‚ÇÖ)))) -- 3R god
    joinEqual .(suc _) (black t‚ÇÅ k‚ÇÅ (red t‚ÇÉ k‚ÇÇ t‚ÇÑ)) k .black (black t‚ÇÇ k‚ÇÉ t‚ÇÖ) = ret (redhd (red (black t‚ÇÅ k‚ÇÅ t‚ÇÉ) k‚ÇÇ (black t‚ÇÑ k (black t‚ÇÇ k‚ÇÉ t‚ÇÖ)))) --rotate
    joinEqual .(suc _) (black t‚ÇÅ k‚ÇÅ (black t‚ÇÉ k‚ÇÇ t‚ÇÑ)) k .red (red t‚ÇÇ k‚ÇÉ t‚ÇÖ) = ret (redhd (red (black t‚ÇÅ k‚ÇÅ (black t‚ÇÉ k‚ÇÇ t‚ÇÑ)) k (black t‚ÇÇ k‚ÇÉ t‚ÇÖ))) --rotate
    joinEqual .(suc _) (black t‚ÇÅ k‚ÇÅ (black t‚ÇÉ k‚ÇÇ t‚ÇÑ)) k .black (black t‚ÇÇ k‚ÇÉ t‚ÇÖ) = ret (blackhd (black t‚ÇÅ k‚ÇÅ (red (black t‚ÇÉ k‚ÇÇ t‚ÇÑ) k (black t‚ÇÇ k‚ÇÉ t‚ÇÖ))))

    mutual
      jj-joinRight : cmp (
                       Œ† color Œª y‚ÇÅ ‚Üí Œ† nat Œª n‚ÇÅ ‚Üí Œ† (irbt y‚ÇÅ n‚ÇÅ) Œª _ ‚Üí
                       Œ† ùïÇ Œª _ ‚Üí
                       Œ† color Œª y‚ÇÇ ‚Üí Œ† nat Œª n‚ÇÇ ‚Üí Œ† (irbt y‚ÇÇ n‚ÇÇ) Œª _ ‚Üí
                       Œ† (U (meta (n‚ÇÅ > n‚ÇÇ))) Œª _ ‚Üí
                       F (arrbt n‚ÇÅ)
                      )
      jj-joinRight .red n‚ÇÅ (red t‚ÇÅ k‚ÇÅ t‚ÇÉ) k y‚ÇÇ n‚ÇÇ t‚ÇÇ p =
        bind (F (arrbt n‚ÇÅ)) (jj-joinRight' _ t‚ÇÉ k _ _ t‚ÇÇ p) (Œª { (redhd t‚ÇÑ) ‚Üí ret (redat t‚ÇÅ k‚ÇÅ t‚ÇÑ)
                                                               ; (blackhd t‚ÇÑ) ‚Üí ret (redat t‚ÇÅ k‚ÇÅ t‚ÇÑ) })
      jj-joinRight .black (suc n‚ÇÅ) (black t‚ÇÅ k‚ÇÅ t‚ÇÉ) k y‚ÇÇ n‚ÇÇ t‚ÇÇ p with n‚ÇÅ Nat.‚âü n‚ÇÇ
      ... | yes refl =
        bind (F (arrbt (suc n‚ÇÅ))) (joinEqual n‚ÇÅ (black t‚ÇÅ k‚ÇÅ t‚ÇÉ) k _ t‚ÇÇ) (Œª { (redhd (red t‚ÇÑ k‚ÇÇ t‚ÇÖ)) ‚Üí ret (redat t‚ÇÑ k‚ÇÇ t‚ÇÖ) --weaken
                                                                            ; (blackhd (black t‚ÇÑ k‚ÇÇ t‚ÇÖ)) ‚Üí ret (blackat t‚ÇÑ k‚ÇÇ t‚ÇÖ) })
      ... | no p‚ÇÅ =
        bind (F (arrbt (suc n‚ÇÅ))) (jj-joinRight _ _ t‚ÇÉ k _ _ t‚ÇÇ (Nat.‚â§‚àß‚â¢‚áí< (Nat.‚â§-pred p) (‚â¢-sym p‚ÇÅ))) Œª { (redat t‚ÇÑ k‚ÇÇ leaf) ‚Üí ret (blackat t‚ÇÅ k‚ÇÅ (red t‚ÇÑ k‚ÇÇ leaf))
                                                                            ; (redat t‚ÇÑ k‚ÇÇ (red t‚ÇÖ k‚ÇÉ t‚ÇÜ)) ‚Üí ret (redat (black t‚ÇÅ k‚ÇÅ t‚ÇÑ) k‚ÇÇ (black t‚ÇÖ k‚ÇÉ t‚ÇÜ)) --rotate
                                                                            ; (redat t‚ÇÑ k‚ÇÇ (black t‚ÇÖ k‚ÇÉ t‚ÇÜ)) ‚Üí ret (blackat t‚ÇÅ k‚ÇÅ (black t‚ÇÖ k‚ÇÉ t‚ÇÜ))
                                                                            ; (blackat t‚ÇÑ k‚ÇÇ t‚ÇÖ) ‚Üí ret (blackat t‚ÇÅ k‚ÇÅ (black t‚ÇÑ k‚ÇÇ t‚ÇÖ)) }

      jj-joinRight' : cmp (
                       Œ† nat Œª n‚ÇÅ ‚Üí Œ† (irbt black n‚ÇÅ) Œª _ ‚Üí
                       Œ† ùïÇ Œª _ ‚Üí
                       Œ† color Œª y‚ÇÇ ‚Üí Œ† nat Œª n‚ÇÇ ‚Üí Œ† (irbt y‚ÇÇ n‚ÇÇ) Œª _ ‚Üí
                       Œ† (U (meta (n‚ÇÅ > n‚ÇÇ))) Œª _ ‚Üí
                       F (hrbt n‚ÇÅ)
                      )
      jj-joinRight' (suc n‚ÇÅ) (black t‚ÇÅ k‚ÇÅ t‚ÇÉ) k y‚ÇÇ n‚ÇÇ t‚ÇÇ p with n‚ÇÅ Nat.‚âü n‚ÇÇ
      ... | yes refl =
        bind (F (hrbt (suc n‚ÇÅ))) (joinEqual n‚ÇÅ (black t‚ÇÅ k‚ÇÅ t‚ÇÉ) k _ t‚ÇÇ) ret
      ... | no p‚ÇÅ =
        bind (F (hrbt (suc n‚ÇÅ))) (jj-joinRight _ _ t‚ÇÉ k _ _ t‚ÇÇ (Nat.‚â§‚àß‚â¢‚áí< (Nat.‚â§-pred p) (‚â¢-sym p‚ÇÅ))) Œª { (redat t‚ÇÑ k‚ÇÇ (red t‚ÇÖ k‚ÇÉ t‚ÇÜ)) ‚Üí ret (redhd (red (black t‚ÇÅ k‚ÇÅ t‚ÇÑ) k‚ÇÇ (black t‚ÇÖ k‚ÇÉ t‚ÇÜ))) -- rotate
                                                                           ; (redat t‚ÇÑ k‚ÇÇ leaf) ‚Üí ret (blackhd (black t‚ÇÅ k‚ÇÅ (red t‚ÇÑ k‚ÇÇ leaf)))
                                                                           ; (redat t‚ÇÑ k‚ÇÇ (black t‚ÇÖ k‚ÇÉ t‚ÇÜ)) ‚Üí ret (blackhd (black t‚ÇÅ k‚ÇÅ (red t‚ÇÑ k‚ÇÇ (black t‚ÇÖ k‚ÇÉ t‚ÇÜ))))
                                                                           ; (blackat t‚ÇÑ k‚ÇÇ t‚ÇÖ) ‚Üí ret (blackhd (black t‚ÇÅ k‚ÇÅ (black t‚ÇÑ k‚ÇÇ t‚ÇÖ))) }

    record RBT : Set where
      pattern
      constructor ‚ü™_‚ü´
      field
        {y} : val color
        {n} : val nat
        t : val (irbt y n)
    rbt : tp pos
    rbt = U (meta RBT)

    j-joinMid :
      cmp
        ( Œ† color Œª y‚ÇÅ ‚Üí Œ† nat Œª n‚ÇÅ ‚Üí Œ† (irbt y‚ÇÅ n‚ÇÅ) Œª _ ‚Üí
          Œ† ùïÇ Œª _ ‚Üí
          Œ† color Œª y‚ÇÇ ‚Üí Œ† nat Œª n‚ÇÇ ‚Üí Œ† (irbt y‚ÇÇ n‚ÇÇ) Œª _ ‚Üí
          F (rbt)
        )
    j-joinMid y‚ÇÅ n‚ÇÅ t‚ÇÅ k y‚ÇÇ n‚ÇÇ t‚ÇÇ with Nat.<-cmp n‚ÇÅ n‚ÇÇ
    j-joinMid red n‚ÇÅ t‚ÇÅ k y‚ÇÇ n‚ÇÇ t‚ÇÇ | tri‚âà ¬¨n‚ÇÅ<n‚ÇÇ refl ¬¨n‚ÇÅ>n‚ÇÇ = ret ‚ü™ (black t‚ÇÅ k t‚ÇÇ) ‚ü´
    j-joinMid black n‚ÇÅ t‚ÇÅ k red n‚ÇÇ t‚ÇÇ | tri‚âà ¬¨n‚ÇÅ<n‚ÇÇ refl ¬¨n‚ÇÅ>n‚ÇÇ = ret ‚ü™ (black t‚ÇÅ k t‚ÇÇ) ‚ü´
    j-joinMid black n‚ÇÅ t‚ÇÅ k black n‚ÇÇ t‚ÇÇ | tri‚âà ¬¨n‚ÇÅ<n‚ÇÇ refl ¬¨n‚ÇÅ>n‚ÇÇ = ret ‚ü™ (red t‚ÇÅ k t‚ÇÇ) ‚ü´
    ... | tri< n‚ÇÅ<n‚ÇÇ n‚ÇÅ‚â¢n‚ÇÇ ¬¨n‚ÇÅ>n‚ÇÇ =
      {!   !}
    ... | tri> ¬¨n‚ÇÅ<n‚ÇÇ n‚ÇÅ‚â¢n‚ÇÇ n‚ÇÅ>n‚ÇÇ =
      bind (F rbt) (jj-joinRight _ _ t‚ÇÅ k _ _ t‚ÇÇ (n‚ÇÅ>n‚ÇÇ)) Œª { (redat t‚ÇÉ k‚ÇÅ (red t‚ÇÑ k‚ÇÇ t‚ÇÖ)) ‚Üí ret ‚ü™ black t‚ÇÉ k‚ÇÅ (red t‚ÇÑ k‚ÇÇ t‚ÇÖ) ‚ü´
                                                            ; (redat t‚ÇÉ k‚ÇÅ (black t‚ÇÑ k‚ÇÇ t‚ÇÖ)) ‚Üí ret ‚ü™ red t‚ÇÉ k‚ÇÅ (black t‚ÇÑ k‚ÇÇ t‚ÇÖ) ‚ü´
                                                            ; (blackat t‚ÇÉ k‚ÇÅ t‚ÇÑ) ‚Üí ret ‚ü™ black t‚ÇÉ k‚ÇÅ t‚ÇÑ ‚ü´ }

    joinMid : cmp (Œ† rbt Œª _ ‚Üí Œ† ùïÇ Œª _ ‚Üí Œ† rbt Œª _ ‚Üí F rbt)
    joinMid ‚ü™ t‚ÇÅ ‚ü´ k ‚ü™ t‚ÇÇ ‚ü´ = j-joinMid _ _ t‚ÇÅ k _ _ t‚ÇÇ

    i-rec : {X : tp neg} ‚Üí
      cmp
        ( Œ† (U X) Œª _ ‚Üí
          Œ†
            ( U
              ( Œ† color Œª y‚ÇÅ ‚Üí Œ† nat Œª n‚ÇÅ ‚Üí Œ† (irbt y‚ÇÅ n‚ÇÅ) Œª _ ‚Üí Œ† (U X) Œª _ ‚Üí
                Œ† ùïÇ Œª _ ‚Üí
                Œ† color Œª y‚ÇÇ ‚Üí Œ† nat Œª n‚ÇÇ ‚Üí Œ† (irbt y‚ÇÇ n‚ÇÇ) Œª _ ‚Üí Œ† (U X) Œª _ ‚Üí
                X
              )
            ) Œª _ ‚Üí
          Œ† color Œª y ‚Üí Œ† nat Œª n ‚Üí Œ† (irbt y n) Œª _ ‚Üí
          X
        )
    i-rec {X} z f .black .zero    leaf            = z
    i-rec {X} z f .red   n        (red   t‚ÇÅ k t‚ÇÇ) =
      f
        _ _ t‚ÇÅ (i-rec {X} z f _ _ t‚ÇÅ)
        k
        _ _ t‚ÇÇ (i-rec {X} z f _ _ t‚ÇÇ)
    i-rec {X} z f .black .(suc _) (black t‚ÇÅ k t‚ÇÇ) =
      f
        _ _ t‚ÇÅ (i-rec {X} z f _ _ t‚ÇÅ)
        k
        _ _ t‚ÇÇ (i-rec {X} z f _ _ t‚ÇÇ)

    rec : {X : tp neg} ‚Üí
      cmp
        ( Œ† (U X) Œª _ ‚Üí
          Œ† (U (Œ† rbt Œª _ ‚Üí Œ† (U X) Œª _ ‚Üí Œ† ùïÇ Œª _ ‚Üí Œ† rbt Œª _ ‚Üí Œ† (U X) Œª _ ‚Üí X)) Œª _ ‚Üí
          Œ† rbt Œª _ ‚Üí X
        )
    rec {X} z f ‚ü™ t ‚ü´ =
      i-rec {X}
        z
        (Œª _ _ t‚ÇÅ ih‚ÇÅ k _ _ t‚ÇÇ ih‚ÇÇ ‚Üí f ‚ü™ t‚ÇÅ ‚ü´ ih‚ÇÅ k ‚ü™ t‚ÇÇ ‚ü´ ih‚ÇÇ)
        _ _ t

module Ex/NatSet where
  open ParametricBST (ListBST Nat.<-strictTotalOrder)

  example : cmp Split
  example =
    bind Split (singleton 1) Œª t‚ÇÅ ‚Üí
    bind Split (insert t‚ÇÅ 2) Œª t‚ÇÅ ‚Üí
    bind Split (singleton 4) Œª t‚ÇÇ ‚Üí
    bind Split (node t‚ÇÅ 3 t‚ÇÇ) Œª t ‚Üí
    split t 2

  -- run Ctrl-C Ctrl-N here
  compute : cmp Split
  compute = {! example  !}

module Ex/NatStringDict where
  strictTotalOrder : StrictTotalOrder 0‚Ñì 0‚Ñì 0‚Ñì
  strictTotalOrder =
    record
      { Carrier = ‚Ñï √ó String
      ; _‚âà_ = Œª (n‚ÇÅ , _) (n‚ÇÇ , _) ‚Üí n‚ÇÅ ‚â° n‚ÇÇ
      ; _<_ = Œª (n‚ÇÅ , _) (n‚ÇÇ , _) ‚Üí n‚ÇÅ < n‚ÇÇ
      ; isStrictTotalOrder =
          record
            { isEquivalence =
                record
                  { refl = Eq.refl
                  ; sym = Eq.sym
                  ; trans = Eq.trans
                  }
            ; trans = Nat.<-trans
            ; compare = Œª (n‚ÇÅ , _) (n‚ÇÇ , _) ‚Üí Nat.<-cmp n‚ÇÅ n‚ÇÇ
            }
      }

  open ParametricBST (RedBlackBST strictTotalOrder)

  example : cmp Split
  example =
    bind Split (singleton (1 , "red")) Œª t‚ÇÅ ‚Üí
    bind Split (insert t‚ÇÅ (2 , "orange")) Œª t‚ÇÅ ‚Üí
    bind Split (singleton (4 , "green")) Œª t‚ÇÇ ‚Üí
    bind Split (node t‚ÇÅ (3 , "yellow") t‚ÇÇ) Œª t ‚Üí
    split t (2 , "")

  -- run Ctrl-C Ctrl-N here
  compute : cmp Split
  compute = {! example  !}
