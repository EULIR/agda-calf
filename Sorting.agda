{-# OPTIONS --prop --rewriting #-}

module Sorting where

open import Prelude using (funext)
open import Metalanguage
open import Upper
open import Refinement
open import Eq
open import PhaseDistinction
open import Relation.Nullary
open import Relation.Binary
open import Relation.Binary.PropositionalEquality as Eq using (_‚â°_; refl; module ‚â°-Reasoning)
open import Data.Product using (_√ó_; _,_; ‚àÉ)
open import Data.Sum using (inj‚ÇÅ; inj‚ÇÇ)
open import Data.Empty
open import Function
open import Data.Nat as Nat using (‚Ñï; zero; suc; z‚â§n; s‚â§s; _+_; ‚åä_/2‚åã; ‚åà_/2‚åâ)
open import Data.Nat.Properties as N using (module ‚â§-Reasoning)

private
  variable
    Œ± : Set

module List where
  open import Data.List public using (List; []; _‚à∑_; [_]; length; _++_)
  open import Data.List.Properties public

  postulate
    list : tp pos ‚Üí tp pos
    list/decode : ‚àÄ {A} ‚Üí val (list A) ‚â° List (val A)
    {-# REWRITE list/decode #-}

open List

module Bool where
  open import Data.Bool public using (Bool; true; false)
  bool = U (meta Bool)

open Bool

record Comparable : Set‚ÇÅ where
  field
    A : tp pos
    _‚â§_ : val A ‚Üí val A ‚Üí Set
    _‚â§·µá_ : val A ‚Üí val A ‚Üí cmp (F bool)
    ‚â§·µá-reflects-‚â§ : ‚àÄ {x y b} ‚Üí ‚óØ ((x ‚â§·µá y) ‚â° ret b ‚Üí Reflects (x ‚â§ y) b)
    ‚â§-refl : Reflexive _‚â§_
    ‚â§-trans : Transitive _‚â§_
    ‚â§-total : Total _‚â§_
    ‚â§-antisym : Antisymmetric _‚â°_ _‚â§_
    h-cost : (x y : val A) ‚Üí ub bool (x ‚â§·µá y) 1

NatComparable : Comparable
NatComparable = record
  { A = U (meta ‚Ñï)
  ; _‚â§_ = _‚â§_
  ; _‚â§·µá_ = Œª x y ‚Üí step' (F bool) 1 (ret (x ‚â§·µá y))
  ; ‚â§·µá-reflects-‚â§ = reflects
  ; ‚â§-refl = ‚â§-refl
  ; ‚â§-trans = ‚â§-trans
  ; ‚â§-total = ‚â§-total
  ; ‚â§-antisym = ‚â§-antisym
  ; h-cost = Œª _ _ ‚Üí ub/step/suc 0 (ub/ret 0)
  }
  where
    open import Data.Nat
    open import Data.Nat.Properties

    ret-injective : ‚àÄ {ùïä v‚ÇÅ v‚ÇÇ} ‚Üí ret {U (meta ùïä)} v‚ÇÅ ‚â° ret {U (meta ùïä)} v‚ÇÇ ‚Üí v‚ÇÅ ‚â° v‚ÇÇ
    ret-injective {ùïä} = Eq.cong (Œª e ‚Üí bind {U (meta ùïä)} (meta ùïä) e id)

    reflects : ‚àÄ {m n b} ‚Üí ‚óØ (step' (F bool) 1 (ret (m ‚â§·µá n)) ‚â° ret {bool} b ‚Üí Reflects (m ‚â§ n) b)
    reflects {m} {n} {b} u h with ret-injective (Eq.subst (_‚â° ret b) (step'/ext (F bool) (ret (m ‚â§·µá n)) 1 u) h)
    ... | refl = ‚â§·µá-reflects-‚â§ m n

module Core (M : Comparable) where
  open Comparable M

  open import Data.List.Relation.Binary.Permutation.Propositional public
  open import Data.List.Relation.Binary.Permutation.Propositional.Properties public
  open import Data.List.Relation.Unary.All public
  open import Data.List.Relation.Unary.Any using (Any; here; there)

  _‚â§*_ : val A ‚Üí val (list A) ‚Üí Set
  _‚â§*_ x = All (x ‚â§_)

  ‚â§-‚â§* : ‚àÄ {x‚ÇÅ x‚ÇÇ l} ‚Üí x‚ÇÅ ‚â§ x‚ÇÇ ‚Üí x‚ÇÇ ‚â§* l ‚Üí x‚ÇÅ ‚â§* l
  ‚â§-‚â§* x‚ÇÅ‚â§x‚ÇÇ []              = []
  ‚â§-‚â§* x‚ÇÅ‚â§x‚ÇÇ (x‚ÇÇ‚â§y ‚à∑ x‚ÇÇ‚â§*ys) = ‚â§-trans x‚ÇÅ‚â§x‚ÇÇ x‚ÇÇ‚â§y ‚à∑ ‚â§-‚â§* x‚ÇÅ‚â§x‚ÇÇ x‚ÇÇ‚â§*ys

  All-++ : {P : val A ‚Üí Set} {l‚ÇÅ l‚ÇÇ : val (list A)} ‚Üí All P l‚ÇÅ ‚Üí All P l‚ÇÇ ‚Üí All P (l‚ÇÅ ++ l‚ÇÇ)
  All-++ []        a‚ÇÇ = a‚ÇÇ
  All-++ (px ‚à∑ a‚ÇÅ) a‚ÇÇ = px ‚à∑ All-++ a‚ÇÅ a‚ÇÇ

  ‚Ü≠-All : {P : val A ‚Üí Set} {l l' : val (list A)} ‚Üí l ‚Ü≠ l' ‚Üí All P l ‚Üí All P l'
  ‚Ü≠-All refl h = h
  ‚Ü≠-All (prep x p) (x‚â§y ‚à∑ x‚â§*ys) = x‚â§y ‚à∑ ‚Ü≠-All p x‚â§*ys
  ‚Ü≠-All (swap x‚ÇÅ x‚ÇÇ p) (x‚â§x‚ÇÅ ‚à∑ x‚â§x‚ÇÇ ‚à∑ x‚â§*ys) = x‚â§x‚ÇÇ ‚à∑ x‚â§x‚ÇÅ ‚à∑ ‚Ü≠-All p x‚â§*ys
  ‚Ü≠-All (trans p‚ÇÅ p‚ÇÇ) x‚â§*l = ‚Ü≠-All p‚ÇÇ (‚Ü≠-All p‚ÇÅ x‚â§*l)

  ‚Ü≠-Any : {P : val A ‚Üí Set} {l l' : val (list A)} ‚Üí l ‚Ü≠ l' ‚Üí Any P l ‚Üí Any P l'
  ‚Ü≠-Any refl h = h
  ‚Ü≠-Any (prep x ‚Ü≠) (here px) = here px
  ‚Ü≠-Any (prep x ‚Ü≠) (there h) = there (‚Ü≠-Any (‚Ü≠) h)
  ‚Ü≠-Any (swap x y ‚Ü≠) (here px) = there (here px)
  ‚Ü≠-Any (swap x y ‚Ü≠) (there (here py)) = here py
  ‚Ü≠-Any (swap x y ‚Ü≠) (there (there h)) = there (there (‚Ü≠-Any (‚Ü≠) h))
  ‚Ü≠-Any (trans ‚Ü≠‚ÇÅ ‚Ü≠‚ÇÇ) h = ‚Ü≠-Any ‚Ü≠‚ÇÇ (‚Ü≠-Any ‚Ü≠‚ÇÅ h)

  data Sorted : val (list A) ‚Üí Set where
    [] : Sorted []
    _‚à∑_ : ‚àÄ {y ys} ‚Üí y ‚â§* ys ‚Üí Sorted ys ‚Üí Sorted (y ‚à∑ ys)

  short-sorted : {l : val (list A)} ‚Üí length l Nat.‚â§ 1 ‚Üí Sorted l
  short-sorted {[]} _ = []
  short-sorted {x ‚à∑ []} _ = [] ‚à∑ []
  short-sorted {x ‚à∑ x‚ÇÅ ‚à∑ l} (s‚â§s ())

  unique-sorted : ‚àÄ {l'‚ÇÅ l'‚ÇÇ} ‚Üí Sorted l'‚ÇÅ ‚Üí Sorted l'‚ÇÇ ‚Üí l'‚ÇÅ ‚Ü≠ l'‚ÇÇ ‚Üí l'‚ÇÅ ‚â° l'‚ÇÇ
  unique-sorted [] [] ‚Ü≠ = refl
  unique-sorted [] (h‚ÇÇ ‚à∑ sorted‚ÇÇ) ‚Ü≠ = ‚ä•-elim (¬¨x‚à∑xs‚Ü≠[] (‚Ü≠-sym ‚Ü≠))
  unique-sorted (h‚ÇÅ ‚à∑ sorted‚ÇÅ) [] ‚Ü≠ = ‚ä•-elim (¬¨x‚à∑xs‚Ü≠[] ‚Ü≠)
  unique-sorted (h‚ÇÅ ‚à∑ sorted‚ÇÅ) (h‚ÇÇ ‚à∑ sorted‚ÇÇ) ‚Ü≠ with
    ‚â§-antisym
      (lookup (‚â§-refl ‚à∑ h‚ÇÅ) (‚Ü≠-Any (‚Ü≠-sym ‚Ü≠) (here refl)))
      (lookup (‚â§-refl ‚à∑ h‚ÇÇ) (‚Ü≠-Any (‚Ü≠) (here refl)))
  ... | refl = Eq.cong (_ ‚à∑_) (unique-sorted sorted‚ÇÅ sorted‚ÇÇ (drop-‚à∑ ‚Ü≠))

  SortedOf : val (list A) ‚Üí val (list A) ‚Üí Set
  SortedOf l l' = l ‚Ü≠ l' √ó Sorted l'

  SortResult : cmp (Œ† (list A) Œª _ ‚Üí F (list A)) ‚Üí val (list A) ‚Üí Set
  SortResult sort l = ‚óØ (‚àÉ Œª l' ‚Üí sort l ‚â° ret l' √ó SortedOf l l')

  IsSort : cmp (Œ† (list A) Œª _ ‚Üí F (list A)) ‚Üí Set
  IsSort sort = ‚àÄ l ‚Üí SortResult sort l

cost = meta ‚Ñï

test/forward  = 1 ‚à∑ 2 ‚à∑ 3 ‚à∑ 4 ‚à∑ 5 ‚à∑ 6 ‚à∑ 7 ‚à∑ 8 ‚à∑ 9 ‚à∑ 10 ‚à∑ 11 ‚à∑ 12 ‚à∑ 13 ‚à∑ 14 ‚à∑ 15 ‚à∑ 16 ‚à∑ []
test/backward = 16 ‚à∑ 15 ‚à∑ 14 ‚à∑ 13 ‚à∑ 12 ‚à∑ 11 ‚à∑ 10 ‚à∑ 9 ‚à∑ 8 ‚à∑ 7 ‚à∑ 6 ‚à∑ 5 ‚à∑ 4 ‚à∑ 3 ‚à∑ 2 ‚à∑ 1 ‚à∑ []
test/shuffled = 4 ‚à∑ 8 ‚à∑ 12 ‚à∑ 16 ‚à∑ 13 ‚à∑ 3 ‚à∑ 5 ‚à∑ 14 ‚à∑ 9 ‚à∑ 6 ‚à∑ 7 ‚à∑ 10 ‚à∑ 11 ‚à∑ 1 ‚à∑ 2 ‚à∑ 15 ‚à∑ []

module InsertionSort (M : Comparable) where
  open Comparable M
  open Core M

  insert : cmp (Œ† A Œª _ ‚Üí Œ† (list A) Œª _ ‚Üí F (list A))
  insert x []       = ret [ x ]
  insert x (y ‚à∑ ys) =
    bind (F (list A)) (x ‚â§·µá y)
      Œª { false ‚Üí bind (F (list A)) (insert x ys) (ret ‚àò (y ‚à∑_))
        ; true  ‚Üí ret (x ‚à∑ (y ‚à∑ ys)) }

  insert/correct : ‚àÄ x l ‚Üí Sorted l ‚Üí ‚óØ (‚àÉ Œª l' ‚Üí insert x l ‚â° ret l' √ó SortedOf (x ‚à∑ l) l')
  insert/correct x []       []       u = [ x ] , refl , refl , [] ‚à∑ []
  insert/correct x (y ‚à∑ ys) (h ‚à∑ hs) u with h-cost x y
  insert/correct x (y ‚à∑ ys) (h ‚à∑ hs) u | ub/intro {q = q} b _ h-eq rewrite eq/ref h-eq
    with ‚â§·µá-reflects-‚â§ u (Eq.trans (eq/ref h-eq) (step'/ext (F bool) (ret b) q u)) | ‚â§-total x y
  insert/correct x (y ‚à∑ ys) (h ‚à∑ hs) u | ub/intro {q = q} false _ _ | of‚Åø ¬¨x‚â§y | inj‚ÇÅ x‚â§y = ‚ä•-elim (¬¨x‚â§y x‚â§y)
  insert/correct x (y ‚à∑ ys) (h ‚à∑ hs) u | ub/intro {q = q} false _ _ | of‚Åø ¬¨x‚â§y | inj‚ÇÇ x‚â§y =
    let (ys' , h-ys' , x‚à∑ys‚Ü≠ys' , sorted-ys') = insert/correct x ys hs u in
    y ‚à∑ ys' , (
      begin
        step' (F (list A)) q (bind (F (list A)) (insert x ys) (ret ‚àò (y ‚à∑_)))
      ‚â°‚ü® step'/ext (F (list A)) (bind (F (list A)) (insert x ys) (ret ‚àò (y ‚à∑_))) q u ‚ü©
        bind (F (list A)) (insert x ys) (ret ‚àò (y ‚à∑_))
      ‚â°‚ü® Eq.cong (Œª e ‚Üí bind (F (list A)) e (ret ‚àò (y ‚à∑_))) h-ys' ‚ü©
        ret (y ‚à∑ ys')
      ‚àé
    ) , trans (swap x y refl) (prep y x‚à∑ys‚Ü≠ys') , ‚Ü≠-All x‚à∑ys‚Ü≠ys' (x‚â§y ‚à∑ h) ‚à∑ sorted-ys'
        where open ‚â°-Reasoning
  insert/correct x (y ‚à∑ ys) (h ‚à∑ hs) u | ub/intro {q = q} true _ _ | of ∏ x‚â§y | _ =
    x ‚à∑ (y ‚à∑ ys) , step'/ext (F (list A)) (ret _) q u , refl , (x‚â§y ‚à∑ ‚â§-‚â§* x‚â§y h) ‚à∑ (h ‚à∑ hs)

  insert/length : ‚àÄ x l (Œ∫ : ‚Ñï ‚Üí Œ±) ‚Üí bind (meta Œ±) (insert x l) (Œ∫ ‚àò length) ‚â° Œ∫ (suc (length l))
  insert/length x []       Œ∫ = refl
  insert/length x (y ‚à∑ ys) Œ∫ with h-cost x y
  ... | ub/intro false _ h-eq rewrite eq/ref h-eq = insert/length x ys (Œ∫ ‚àò suc)
  ... | ub/intro true  _ h-eq rewrite eq/ref h-eq = refl

  insert/cost : cmp (Œ† A Œª _ ‚Üí Œ† (list A) Œª _ ‚Üí cost)
  insert/cost _ = length

  insert‚â§insert/cost : ‚àÄ x l ‚Üí ub (list A) (insert x l) (insert/cost x l)
  insert‚â§insert/cost x []       = ub/ret zero
  insert‚â§insert/cost x (y ‚à∑ ys) with h-cost x y
  ... | ub/intro true  q‚â§1 h-eq rewrite eq/ref h-eq =
    ub/intro _ (N.‚â§-trans q‚â§1 (s‚â§s z‚â§n)) (ret (eq/intro refl))
  ... | ub/intro {q = q} false q‚â§1 h-eq rewrite eq/ref h-eq =
    ub/relax
      (begin
        length ys + q + 0
      ‚â°‚ü® N.+-identity ≥ _ ‚ü©
        length ys + q
      ‚â°‚ü® N.+-comm (length ys) q ‚ü©
        q + length ys
      ‚â§‚ü® N.+-monoÀ°-‚â§ _ q‚â§1 ‚ü©
        suc (length ys)
      ‚àé)
      (ub/bind/const _ _ (ub/step (length ys) q (insert‚â§insert/cost x ys)) Œª _ ‚Üí ub/ret zero)
      where open ‚â§-Reasoning

  sort : cmp (Œ† (list A) Œª _ ‚Üí F (list A))
  sort []       = ret []
  sort (x ‚à∑ xs) = bind (F (list A)) (sort xs) (insert x)

  sort/correct : IsSort sort
  sort/correct []       u = [] , refl , refl , []
  sort/correct (x ‚à∑ xs) u =
    let (xs'   , h-xs'   , xs‚Ü≠xs'     , sorted-xs'  ) = sort/correct xs u in
    let (x‚à∑xs' , h-x‚à∑xs' , x‚à∑xs‚Ü≠x‚à∑xs' , sorted-x‚à∑xs') = insert/correct x xs' sorted-xs' u in
    x‚à∑xs' , (
      begin
        sort (x ‚à∑ xs)
      ‚â°‚ü®‚ü©
        bind (F (list A)) (sort xs) (insert x)
      ‚â°‚ü® Eq.cong (Œª e ‚Üí bind (F (list A)) e (insert x)) h-xs' ‚ü©
        bind (F (list A)) (ret {list A} xs') (insert x)
      ‚â°‚ü®‚ü©
        insert x xs'
      ‚â°‚ü® h-x‚à∑xs' ‚ü©
        ret x‚à∑xs'
      ‚àé
    ) , trans (prep x xs‚Ü≠xs') x‚à∑xs‚Ü≠x‚à∑xs' , sorted-x‚à∑xs'
        where open ‚â°-Reasoning

  sort/length : ‚àÄ l (Œ∫ : ‚Ñï ‚Üí Œ±) ‚Üí bind (meta Œ±) (sort l) (Œ∫ ‚àò length) ‚â° Œ∫ (length l)
  sort/length []       Œ∫ = refl
  sort/length (x ‚à∑ xs) Œ∫ =
    begin
      bind _ (sort (x ‚à∑ xs)) (Œ∫ ‚àò length)
    ‚â°‚ü®‚ü©
      bind _ (bind (F (list A)) (sort xs) (insert x)) (Œ∫ ‚àò length)
    ‚â°‚ü®‚ü©
      bind _ (sort xs) (Œª xs' ‚Üí bind (meta _) (insert x xs') (Œ∫ ‚àò length))
    ‚â°‚ü® Eq.cong (bind _ (sort xs)) (funext Œª xs' ‚Üí insert/length x xs' Œ∫)  ‚ü©
      bind _ (sort xs) (Œª xs' ‚Üí Œ∫ (suc (length xs')))
    ‚â°‚ü® sort/length xs (Œ∫ ‚àò suc) ‚ü©
      Œ∫ (length (x ‚à∑ xs))
    ‚àé
      where open ‚â°-Reasoning

  sort/cost : cmp (Œ† (list A) Œª _ ‚Üí cost)
  sort/cost []       = zero
  sort/cost (x ‚à∑ xs) = sort/cost xs + insert/cost x xs

  sort‚â§sort/cost : ‚àÄ l ‚Üí ub (list A) (sort l) (sort/cost l)
  sort‚â§sort/cost []       = ub/ret zero
  sort‚â§sort/cost (x ‚à∑ xs) with ub/bind (sort/cost xs) length (sort‚â§sort/cost xs) (insert‚â§insert/cost x)
  ... | h-bind rewrite sort/length xs (_+_ (sort/cost xs)) = h-bind

module Ex/InsertionSort where
  module Sort = InsertionSort NatComparable

  list' = list (U (meta ‚Ñï))

  ex/insert : cmp (F list')
  ex/insert = Sort.insert 3 (1 ‚à∑ 2 ‚à∑ 4 ‚à∑ [])

  ex/sort : cmp (F list')
  ex/sort = Sort.sort (1 ‚à∑ 5 ‚à∑ 3 ‚à∑ 1 ‚à∑ 2 ‚à∑ [])

  ex/sort/forward : cmp (F list')
  ex/sort/forward = Sort.sort test/forward  -- cost: 15

  ex/sort/backward : cmp (F list')
  ex/sort/backward = Sort.sort test/backward  -- cost: 120

  ex/sort/shuffled : cmp (F list')
  ex/sort/shuffled = Sort.sort test/shuffled  -- cost: 76

module MergeSort (M : Comparable) where
  open Comparable M
  open Core M

  _‚â•_ : val A ‚Üí val A ‚Üí Set
  x ‚â• y = y ‚â§ x

  _‚â∞_ : val A ‚Üí val A ‚Üí Set
  x ‚â∞ y = ¬¨ x ‚â§ y

  ‚â∞‚áí‚â• : _‚â∞_ ‚áí _‚â•_
  ‚â∞‚áí‚â• {x} {y} h with ‚â§-total x y
  ... | inj‚ÇÅ h‚ÇÅ = ‚ä•-elim (h h‚ÇÅ)
  ... | inj‚ÇÇ h‚ÇÇ = h‚ÇÇ

  module _ where

    ‚åàlog‚ÇÇ‚åâ/aux : (n : ‚Ñï) ‚Üí (m : ‚Ñï) ‚Üí m Nat.‚â§ n ‚Üí ‚Ñï
    ‚åàlog‚ÇÇ‚åâ/aux _ zero _ = zero
    ‚åàlog‚ÇÇ‚åâ/aux _ (suc zero) _ = zero
    ‚åàlog‚ÇÇ‚åâ/aux (suc (suc n)) (suc (suc m)) (s‚â§s (s‚â§s h-strong)) =
      suc (‚åàlog‚ÇÇ‚åâ/aux (suc n) (‚åà suc (suc m) /2‚åâ) (s‚â§s (N.‚â§-trans (N.‚åàn/2‚åâ‚â§n m) h-strong)))

    ‚åàlog‚ÇÇ‚åâ/aux-unique : {m n‚ÇÅ n‚ÇÇ : ‚Ñï} ‚Üí {h‚ÇÅ : m Nat.‚â§ n‚ÇÅ} ‚Üí {h‚ÇÇ : m Nat.‚â§ n‚ÇÇ} ‚Üí
      ‚åàlog‚ÇÇ‚åâ/aux n‚ÇÅ m h‚ÇÅ ‚â° ‚åàlog‚ÇÇ‚åâ/aux n‚ÇÇ m h‚ÇÇ
    ‚åàlog‚ÇÇ‚åâ/aux-unique {zero} = refl
    ‚åàlog‚ÇÇ‚åâ/aux-unique {suc zero} = refl
    ‚åàlog‚ÇÇ‚åâ/aux-unique {suc (suc m)} {h‚ÇÅ = s‚â§s (s‚â§s _)} {h‚ÇÇ = s‚â§s (s‚â§s _)} = Eq.cong suc ‚åàlog‚ÇÇ‚åâ/aux-unique

    ‚åàlog‚ÇÇ_‚åâ : ‚Ñï ‚Üí ‚Ñï
    ‚åàlog‚ÇÇ n ‚åâ = ‚åàlog‚ÇÇ‚åâ/aux n n N.‚â§-refl

    log‚ÇÇ-mono : ‚åàlog‚ÇÇ_‚åâ Preserves Nat._‚â§_ ‚ü∂ Nat._‚â§_
    log‚ÇÇ-mono {m‚ÇÅ} {m‚ÇÇ} h =
      begin
        ‚åàlog‚ÇÇ m‚ÇÅ ‚åâ
      ‚â°‚ü® ‚åàlog‚ÇÇ‚åâ/aux-unique ‚ü©
        ‚åàlog‚ÇÇ‚åâ/aux m‚ÇÇ m‚ÇÅ h
      ‚â§‚ü® ‚åàlog‚ÇÇ‚åâ/aux-mono h ‚ü©
        ‚åàlog‚ÇÇ m‚ÇÇ ‚åâ
      ‚àé
        where
          open ‚â§-Reasoning

          ‚åàlog‚ÇÇ‚åâ/aux-mono : {m‚ÇÅ m‚ÇÇ n : ‚Ñï} ‚Üí {h‚ÇÅ : m‚ÇÅ Nat.‚â§ n} ‚Üí {h‚ÇÇ : m‚ÇÇ Nat.‚â§ n} ‚Üí
            m‚ÇÅ Nat.‚â§ m‚ÇÇ ‚Üí ‚åàlog‚ÇÇ‚åâ/aux n m‚ÇÅ h‚ÇÅ Nat.‚â§ ‚åàlog‚ÇÇ‚åâ/aux n m‚ÇÇ h‚ÇÇ
          ‚åàlog‚ÇÇ‚åâ/aux-mono {zero} _ = z‚â§n
          ‚åàlog‚ÇÇ‚åâ/aux-mono {suc zero} _ = z‚â§n
          ‚åàlog‚ÇÇ‚åâ/aux-mono {suc (suc _)} {h‚ÇÅ = s‚â§s (s‚â§s _)} {h‚ÇÇ = s‚â§s (s‚â§s _)} (s‚â§s (s‚â§s h)) =
            s‚â§s (‚åàlog‚ÇÇ‚åâ/aux-mono (N.‚åàn/2‚åâ-mono (s‚â§s (s‚â§s h))))

    log‚ÇÇ-suc : ‚àÄ {n k} ‚Üí ‚åàlog‚ÇÇ n ‚åâ Nat.‚â§ suc k ‚Üí ‚åàlog‚ÇÇ ‚åà n /2‚åâ ‚åâ Nat.‚â§ k
    log‚ÇÇ-suc {zero} h = z‚â§n
    log‚ÇÇ-suc {suc zero} h = z‚â§n
    log‚ÇÇ-suc {suc (suc n)} {k} (s‚â§s h) =
      begin
        ‚åàlog‚ÇÇ ‚åà suc (suc n) /2‚åâ ‚åâ
      ‚â°‚ü® ‚åàlog‚ÇÇ‚åâ/aux-unique ‚ü©
        ‚åàlog‚ÇÇ‚åâ/aux (suc n) ‚åà suc (suc n) /2‚åâ _
      ‚â§‚ü® h ‚ü©
        k
      ‚àé
        where open ‚â§-Reasoning

    ‚åàlog‚ÇÇn‚åâ‚â°0‚áín‚â§1 : {n : ‚Ñï} ‚Üí ‚åàlog‚ÇÇ n ‚åâ ‚â° 0 ‚Üí n Nat.‚â§ 1
    ‚åàlog‚ÇÇn‚åâ‚â°0‚áín‚â§1 {zero} refl = z‚â§n
    ‚åàlog‚ÇÇn‚åâ‚â°0‚áín‚â§1 {suc zero} refl = s‚â§s z‚â§n

  pair = Œ£++ (list A) Œª _ ‚Üí (list A)

  split/clocked : cmp (Œ† (U (meta ‚Ñï)) Œª _ ‚Üí Œ† (list A) Œª _ ‚Üí F pair)
  split/clocked zero    l        = ret ([] , l)
  split/clocked (suc k) []       = ret ([] , [])
  split/clocked (suc k) (x ‚à∑ xs) = bind (F pair) (split/clocked k xs) Œª (l‚ÇÅ , l‚ÇÇ) ‚Üí ret (x ‚à∑ l‚ÇÅ , l‚ÇÇ)

  split/clocked/correct : ‚àÄ k k' l ‚Üí k + k' ‚â° length l ‚Üí
    ‚óØ (‚àÉ Œª l‚ÇÅ ‚Üí ‚àÉ Œª l‚ÇÇ ‚Üí split/clocked k l ‚â° ret (l‚ÇÅ , l‚ÇÇ) √ó length l‚ÇÅ ‚â° k √ó length l‚ÇÇ ‚â° k' √ó l ‚Ü≠ (l‚ÇÅ ++ l‚ÇÇ))
  split/clocked/correct zero    k' l        refl u = [] , l , refl , refl , refl , refl
  split/clocked/correct (suc k) k' (x ‚à∑ xs) h    u =
    let (l‚ÇÅ , l‚ÇÇ , ‚â° , h‚ÇÅ , h‚ÇÇ , ‚Ü≠) = split/clocked/correct k k' xs (N.suc-injective h) u in
    x ‚à∑ l‚ÇÅ , l‚ÇÇ , Eq.cong (Œª e ‚Üí bind (F pair) e _) ‚â° , Eq.cong suc h‚ÇÅ , h‚ÇÇ , prep x ‚Ü≠

  split/clocked/length : ‚àÄ k k' l ‚Üí k + k' ‚â° length l ‚Üí (Œ∫ : ‚Ñï ‚Üí ‚Ñï ‚Üí Œ±) ‚Üí
    bind (meta Œ±) (split/clocked k l) (Œª (l‚ÇÅ , l‚ÇÇ) ‚Üí Œ∫ (length l‚ÇÅ) (length l‚ÇÇ)) ‚â° Œ∫ k k'
  split/clocked/length zero    _  l        refl _ = refl
  split/clocked/length (suc k) k' (x ‚à∑ xs) h    Œ∫ = split/clocked/length k k' xs (N.suc-injective h) (Œ∫ ‚àò suc)

  split/clocked/cost : cmp (Œ† (U (meta ‚Ñï)) Œª _ ‚Üí Œ† (list A) Œª _ ‚Üí cost)
  split/clocked/cost _ _ = zero

  split/clocked‚â§split/clocked/cost : ‚àÄ k l ‚Üí ub pair (split/clocked k l) (split/clocked/cost k l)
  split/clocked‚â§split/clocked/cost zero    l        = ub/ret _
  split/clocked‚â§split/clocked/cost (suc k) []       = ub/ret _
  split/clocked‚â§split/clocked/cost (suc k) (x ‚à∑ xs) = ub/bind/const zero zero (split/clocked‚â§split/clocked/cost k xs) Œª _ ‚Üí ub/ret _

  split : cmp (Œ† (list A) Œª _ ‚Üí F pair)
  split l = split/clocked ‚åä length l /2‚åã l

  split/correct : ‚àÄ l ‚Üí
    ‚óØ (‚àÉ Œª l‚ÇÅ ‚Üí ‚àÉ Œª l‚ÇÇ ‚Üí split l ‚â° ret (l‚ÇÅ , l‚ÇÇ) √ó length l‚ÇÅ ‚â° ‚åä length l /2‚åã √ó length l‚ÇÇ ‚â° ‚åà length l /2‚åâ √ó l ‚Ü≠ (l‚ÇÅ ++ l‚ÇÇ))
  split/correct l = split/clocked/correct ‚åä length l /2‚åã ‚åà length l /2‚åâ l (N.‚åän/2‚åã+‚åàn/2‚åâ‚â°n (length l))

  split/length : ‚àÄ l (Œ∫ : ‚Ñï ‚Üí ‚Ñï ‚Üí Œ±) ‚Üí
    bind (meta Œ±) (split l) (Œª (l‚ÇÅ , l‚ÇÇ) ‚Üí Œ∫ (length l‚ÇÅ) (length l‚ÇÇ)) ‚â° Œ∫ ‚åä length l /2‚åã ‚åà length l /2‚åâ
  split/length l = split/clocked/length ‚åä length l /2‚åã ‚åà length l /2‚åâ l (N.‚åän/2‚åã+‚åàn/2‚åâ‚â°n (length l))

  split/cost : cmp (Œ† (list A) Œª _ ‚Üí cost)
  split/cost l = split/clocked/cost ‚åä length l /2‚åã l

  split‚â§split/cost : ‚àÄ l ‚Üí ub pair (split l) (split/cost l)
  split‚â§split/cost l = split/clocked‚â§split/clocked/cost ‚åä length l /2‚åã l

  merge/clocked : cmp (Œ† (U (meta ‚Ñï)) Œª _ ‚Üí Œ† pair Œª _ ‚Üí F (list A))
  merge/clocked zero    (l‚ÇÅ     , l‚ÇÇ    ) = ret (l‚ÇÅ ++ l‚ÇÇ)
  merge/clocked (suc k) ([]     , l‚ÇÇ    ) = ret l‚ÇÇ
  merge/clocked (suc k) (x ‚à∑ xs , []    ) = ret (x ‚à∑ xs)
  merge/clocked (suc k) (x ‚à∑ xs , y ‚à∑ ys) =
    bind (F (list A)) (x ‚â§·µá y)
      Œª { false ‚Üí bind (F (list A)) (merge/clocked k (x ‚à∑ xs , ys)) (ret ‚àò (y ‚à∑_))
        ; true  ‚Üí bind (F (list A)) (merge/clocked k (xs , y ‚à∑ ys)) (ret ‚àò (x ‚à∑_)) }

  merge/clocked/correct : ‚àÄ k l‚ÇÅ l‚ÇÇ ‚Üí length l‚ÇÅ + length l‚ÇÇ Nat.‚â§ k ‚Üí Sorted l‚ÇÅ ‚Üí Sorted l‚ÇÇ ‚Üí
    ‚óØ (‚àÉ Œª l ‚Üí merge/clocked k (l‚ÇÅ , l‚ÇÇ) ‚â° ret l √ó SortedOf (l‚ÇÅ ++ l‚ÇÇ) l)
  merge/clocked/correct zero    []       []       h       sorted‚ÇÅ        sorted‚ÇÇ        u =
    [] , refl , refl , []
  merge/clocked/correct (suc k) []       l‚ÇÇ       h       sorted‚ÇÅ        sorted‚ÇÇ        u =
    l‚ÇÇ , refl , refl , sorted‚ÇÇ
  merge/clocked/correct (suc k) (x ‚à∑ xs) []       h       sorted‚ÇÅ        sorted‚ÇÇ        u
    rewrite List.++-identity ≥ (x ‚à∑ xs) = x ‚à∑ xs , refl , refl , sorted‚ÇÅ
  merge/clocked/correct (suc k) (x ‚à∑ xs) (y ‚à∑ ys) (s‚â§s h) (h‚ÇÅ ‚à∑ sorted‚ÇÅ) (h‚ÇÇ ‚à∑ sorted‚ÇÇ) u with h-cost x y
  merge/clocked/correct (suc k) (x ‚à∑ xs) (y ‚à∑ ys) (s‚â§s h) (h‚ÇÅ ‚à∑ sorted‚ÇÅ) (h‚ÇÇ ‚à∑ sorted‚ÇÇ) u | ub/intro {q = q} b _ h-eq rewrite eq/ref h-eq
    with ‚â§·µá-reflects-‚â§ u (Eq.trans (eq/ref h-eq) (step'/ext (F bool) (ret b) q u))
  merge/clocked/correct (suc k) (x ‚à∑ xs) (y ‚à∑ ys) (s‚â§s h) (h‚ÇÅ ‚à∑ sorted‚ÇÅ) (h‚ÇÇ ‚à∑ sorted‚ÇÇ) u | ub/intro {q = q} false _ h-eq | of‚Åø ¬¨p =
    let h = Eq.subst (Nat._‚â§ k) (N.+-suc (length xs) (length ys)) h in
    let (l , ‚â° , ‚Ü≠ , sorted) = merge/clocked/correct k (x ‚à∑ xs) ys h (h‚ÇÅ ‚à∑ sorted‚ÇÅ) sorted‚ÇÇ u in
    let p = ‚â∞‚áí‚â• ¬¨p in
    y ‚à∑ l , (
      let open ‚â°-Reasoning in
      begin
        step' (F (list A)) q (bind (F (list A)) (merge/clocked k (x ‚à∑ xs , ys)) (ret ‚àò (y ‚à∑_)))
      ‚â°‚ü® step'/ext (F (list A)) (bind (F (list A)) (merge/clocked k _) _) q u ‚ü©
        bind (F (list A)) (merge/clocked k (x ‚à∑ xs , ys)) (ret ‚àò (y ‚à∑_))
      ‚â°‚ü® Eq.cong (Œª e ‚Üí bind (F (list A)) e _) ‚â° ‚ü©
        ret (y ‚à∑ l)
      ‚àé
    ) , (
      let open PermutationReasoning in
      begin
        x ‚à∑ xs ++ y ‚à∑ ys
      ‚Ü≠‚ü® ++-comm (x ‚à∑ xs) (y ‚à∑ ys) ‚ü©
        y ‚à∑ ys ++ x ‚à∑ xs
      ‚Ü≠‚ü® prep y (trans (++-comm ys (x ‚à∑ xs)) ‚Ü≠) ‚ü©
        y ‚à∑ l
      ‚àé
     ) , ‚Ü≠-All (‚Ü≠) (All-++ (p ‚à∑ ‚â§-‚â§* p h‚ÇÅ) h‚ÇÇ) ‚à∑ sorted
  merge/clocked/correct (suc k) (x ‚à∑ xs) (y ‚à∑ ys) (s‚â§s h) (h‚ÇÅ ‚à∑ sorted‚ÇÅ) (h‚ÇÇ ‚à∑ sorted‚ÇÇ) u | ub/intro {q = q} true  _ h-eq | of ∏ p =
    let (l , ‚â° , ‚Ü≠ , sorted) = merge/clocked/correct k xs (y ‚à∑ ys) h sorted‚ÇÅ (h‚ÇÇ ‚à∑ sorted‚ÇÇ) u in
    x ‚à∑ l , (
      let open ‚â°-Reasoning in
      begin
        step' (F (list A)) q (bind (F (list A)) (merge/clocked k (xs , y ‚à∑ ys)) (ret ‚àò (x ‚à∑_)))
      ‚â°‚ü® step'/ext (F (list A)) (bind (F (list A)) (merge/clocked k _) _) q u ‚ü©
        bind (F (list A)) (merge/clocked k (xs , y ‚à∑ ys)) (ret ‚àò (x ‚à∑_))
      ‚â°‚ü® Eq.cong (Œª e ‚Üí bind (F (list A)) e _) ‚â° ‚ü©
        ret (x ‚à∑ l)
      ‚àé
    ) , prep x ‚Ü≠ , ‚Ü≠-All (‚Ü≠) (All-++ h‚ÇÅ (p ‚à∑ ‚â§-‚â§* p h‚ÇÇ)) ‚à∑ sorted

  merge/clocked/length : ‚àÄ k (l‚ÇÅ l‚ÇÇ : val (list A)) (Œ∫ : ‚Ñï ‚Üí Œ±) ‚Üí
    bind (meta Œ±) (merge/clocked k (l‚ÇÅ , l‚ÇÇ)) (Œ∫ ‚àò length) ‚â° Œ∫ (length l‚ÇÅ + length l‚ÇÇ)
  merge/clocked/length zero    l‚ÇÅ       l‚ÇÇ       Œ∫ = Eq.cong Œ∫ (length-++ l‚ÇÅ)
  merge/clocked/length (suc k) []       l‚ÇÇ       Œ∫ = refl
  merge/clocked/length (suc k) (x ‚à∑ xs) []       Œ∫ = Eq.cong (Œ∫ ‚àò suc) (Eq.sym (N.+-identity ≥ (length xs)))
  merge/clocked/length (suc k) (x ‚à∑ xs) (y ‚à∑ ys) Œ∫ with h-cost x y
  ... | ub/intro false _ h-eq rewrite eq/ref h-eq =
    begin
      bind _ (merge/clocked k (x ‚à∑ xs , ys)) (Œª l ‚Üí (Œ∫ ‚àò length) (y ‚à∑ l))
    ‚â°‚ü®‚ü©
      bind _ (merge/clocked k (x ‚à∑ xs , ys)) (Œª l ‚Üí (Œ∫ ‚àò suc) (length l))
    ‚â°‚ü® merge/clocked/length k (x ‚à∑ xs) ys (Œ∫ ‚àò suc) ‚ü©
      Œ∫ (suc (length (x ‚à∑ xs) + length ys))
    ‚â°‚ü® Eq.cong Œ∫ (Eq.sym (N.+-suc (length (x ‚à∑ xs)) (length ys))) ‚ü©
      Œ∫ (length (x ‚à∑ xs) + length (y ‚à∑ ys))
    ‚àé
      where open ‚â°-Reasoning
  ... | ub/intro true  _ h-eq rewrite eq/ref h-eq =
    begin
      bind _ (merge/clocked k (xs , y ‚à∑ ys)) (Œª l ‚Üí (Œ∫ ‚àò length) (x ‚à∑ l))
    ‚â°‚ü®‚ü©
      bind _ (merge/clocked k (xs , y ‚à∑ ys)) (Œª l ‚Üí (Œ∫ ‚àò suc) (length l))
    ‚â°‚ü® merge/clocked/length k xs (y ‚à∑ ys) (Œ∫ ‚àò suc) ‚ü©
      Œ∫ (suc (length xs + length (y ‚à∑ ys)))
    ‚â°‚ü®‚ü©
      Œ∫ (length (x ‚à∑ xs) + length (y ‚à∑ ys))
    ‚àé
      where open ‚â°-Reasoning

  merge/clocked/cost : cmp (Œ† (U (meta ‚Ñï)) Œª _ ‚Üí Œ† pair Œª _ ‚Üí cost)
  merge/clocked/cost k _ = k

  merge/clocked‚â§merge/clocked/cost : ‚àÄ k p ‚Üí ub (list A) (merge/clocked k p) (merge/clocked/cost k p)
  merge/clocked‚â§merge/clocked/cost zero    (l‚ÇÅ     , l‚ÇÇ    ) = ub/ret _
  merge/clocked‚â§merge/clocked/cost (suc k) ([]     , l‚ÇÇ    ) = ub/ret _
  merge/clocked‚â§merge/clocked/cost (suc k) (x ‚à∑ xs , []    ) = ub/ret _
  merge/clocked‚â§merge/clocked/cost (suc k) (x ‚à∑ xs , y ‚à∑ ys) =
    ub/bind/const 1 k (h-cost x y)
      Œª { false ‚Üí ub/bind/const' k zero (N.+-identity ≥ k) (merge/clocked‚â§merge/clocked/cost k _) Œª _ ‚Üí ub/ret _
        ; true  ‚Üí ub/bind/const' k zero (N.+-identity ≥ k) (merge/clocked‚â§merge/clocked/cost k _) Œª _ ‚Üí ub/ret _ }

  merge : cmp (Œ† pair Œª _ ‚Üí F (list A))
  merge (l‚ÇÅ , l‚ÇÇ) = merge/clocked (length l‚ÇÅ + length l‚ÇÇ) (l‚ÇÅ , l‚ÇÇ)

  merge/correct : ‚àÄ l‚ÇÅ l‚ÇÇ ‚Üí Sorted l‚ÇÅ ‚Üí Sorted l‚ÇÇ ‚Üí
    ‚óØ (‚àÉ Œª l ‚Üí merge (l‚ÇÅ , l‚ÇÇ) ‚â° ret l √ó SortedOf (l‚ÇÅ ++ l‚ÇÇ) l)
  merge/correct l‚ÇÅ l‚ÇÇ = merge/clocked/correct (length l‚ÇÅ + length l‚ÇÇ) l‚ÇÅ l‚ÇÇ N.‚â§-refl

  merge/length : ‚àÄ l‚ÇÅ l‚ÇÇ (Œ∫ : ‚Ñï ‚Üí Œ±) ‚Üí bind (meta Œ±) (merge (l‚ÇÅ , l‚ÇÇ)) (Œ∫ ‚àò length) ‚â° Œ∫ (length l‚ÇÅ + length l‚ÇÇ)
  merge/length l‚ÇÅ l‚ÇÇ = merge/clocked/length (length l‚ÇÅ + length l‚ÇÇ) l‚ÇÅ l‚ÇÇ

  merge/cost : cmp (Œ† pair Œª _ ‚Üí cost)
  merge/cost (l‚ÇÅ , l‚ÇÇ) = merge/clocked/cost (length l‚ÇÅ + length l‚ÇÇ) (l‚ÇÅ , l‚ÇÇ)

  merge‚â§merge/cost : ‚àÄ p ‚Üí ub (list A) (merge p) (merge/cost p)
  merge‚â§merge/cost (l‚ÇÅ , l‚ÇÇ) = merge/clocked‚â§merge/clocked/cost (length l‚ÇÅ + length l‚ÇÇ) (l‚ÇÅ , l‚ÇÇ)

  sort/clocked : cmp (Œ† (U (meta ‚Ñï)) Œª _ ‚Üí Œ† (list A) Œª _ ‚Üí F (list A))
  sort/clocked zero    l = ret l
  sort/clocked (suc k) l =
    bind (F (list A)) (split l) Œª (l‚ÇÅ , l‚ÇÇ) ‚Üí
      bind (F (list A)) (sort/clocked k l‚ÇÅ) Œª l‚ÇÅ' ‚Üí
        bind (F (list A)) (sort/clocked k l‚ÇÇ) Œª l‚ÇÇ' ‚Üí
          merge (l‚ÇÅ' , l‚ÇÇ')

  sort/clocked/correct : ‚àÄ k l ‚Üí ‚åàlog‚ÇÇ length l ‚åâ Nat.‚â§ k ‚Üí SortResult (sort/clocked k) l
  sort/clocked/correct zero    l h u = l , refl , refl , short-sorted (‚åàlog‚ÇÇn‚åâ‚â°0‚áín‚â§1 (N.n‚â§0‚áín‚â°0 h))
  sort/clocked/correct (suc k) l h u =
    let (l‚ÇÅ , l‚ÇÇ , ‚â° , length‚ÇÅ , length‚ÇÇ , ‚Ü≠) = split/correct l u in
    let (l‚ÇÅ' , ‚â°‚ÇÅ , ‚Ü≠‚ÇÅ , sorted‚ÇÅ) = sort/clocked/correct k l‚ÇÅ (
                                      let open ‚â§-Reasoning in
                                      begin
                                        ‚åàlog‚ÇÇ length l‚ÇÅ ‚åâ
                                      ‚â°‚ü® Eq.cong ‚åàlog‚ÇÇ_‚åâ length‚ÇÅ ‚ü©
                                        ‚åàlog‚ÇÇ ‚åä length l /2‚åã ‚åâ
                                      ‚â§‚ü® log‚ÇÇ-mono (N.‚åän/2‚åã‚â§‚åàn/2‚åâ (length l)) ‚ü©
                                        ‚åàlog‚ÇÇ ‚åà length l /2‚åâ ‚åâ
                                      ‚â§‚ü® log‚ÇÇ-suc h ‚ü©
                                        k
                                      ‚àé
                                    ) u in
    let (l‚ÇÇ' , ‚â°‚ÇÇ , ‚Ü≠‚ÇÇ , sorted‚ÇÇ) = sort/clocked/correct k l‚ÇÇ (
                                      let open ‚â§-Reasoning in
                                      begin
                                        ‚åàlog‚ÇÇ length l‚ÇÇ ‚åâ
                                      ‚â°‚ü® Eq.cong ‚åàlog‚ÇÇ_‚åâ length‚ÇÇ ‚ü©
                                        ‚åàlog‚ÇÇ ‚åà length l /2‚åâ ‚åâ
                                      ‚â§‚ü® log‚ÇÇ-suc h ‚ü©
                                        k
                                      ‚àé
                                    ) u in
    let (l' , ‚â°' , ‚Ü≠' , sorted) = merge/correct l‚ÇÅ' l‚ÇÇ' sorted‚ÇÅ sorted‚ÇÇ u in
    l' , (
      let open ‚â°-Reasoning in
      begin
        sort/clocked (suc k) l
      ‚â°‚ü®‚ü©
        (bind (F (list A)) (split l) Œª (l‚ÇÅ , l‚ÇÇ) ‚Üí
          bind (F (list A)) (sort/clocked k l‚ÇÅ) Œª l‚ÇÅ' ‚Üí
            bind (F (list A)) (sort/clocked k l‚ÇÇ) Œª l‚ÇÇ' ‚Üí
              merge (l‚ÇÅ' , l‚ÇÇ'))
      ‚â°‚ü® Eq.cong (Œª e ‚Üí bind (F (list A)) e _) ‚â° ‚ü©
        (bind (F (list A)) (sort/clocked k l‚ÇÅ) Œª l‚ÇÅ' ‚Üí
          bind (F (list A)) (sort/clocked k l‚ÇÇ) Œª l‚ÇÇ' ‚Üí
            merge (l‚ÇÅ' , l‚ÇÇ'))
      ‚â°‚ü® Eq.cong (Œª e ‚Üí bind (F (list A)) e Œª l‚ÇÅ' ‚Üí bind (F (list A)) (sort/clocked k l‚ÇÇ) _) ‚â°‚ÇÅ ‚ü©
        (bind (F (list A)) (sort/clocked k l‚ÇÇ) Œª l‚ÇÇ' ‚Üí
          merge (l‚ÇÅ' , l‚ÇÇ'))
      ‚â°‚ü® Eq.cong (Œª e ‚Üí bind (F (list A)) e Œª l‚ÇÇ' ‚Üí merge (l‚ÇÅ' , l‚ÇÇ')) ‚â°‚ÇÇ ‚ü©
        merge (l‚ÇÅ' , l‚ÇÇ')
      ‚â°‚ü® ‚â°' ‚ü©
        ret l'
      ‚àé
    ) , (
      let open PermutationReasoning in
      begin
        l
      ‚Ü≠‚ü® ‚Ü≠ ‚ü©
        l‚ÇÅ ++ l‚ÇÇ
      ‚Ü≠‚ü® ++‚Å∫ ‚Ü≠‚ÇÅ ‚Ü≠‚ÇÇ ‚ü©
        l‚ÇÅ' ++ l‚ÇÇ'
      ‚Ü≠‚ü® ‚Ü≠' ‚ü©
        l'
      ‚àé
    ) , sorted

  sort/clocked/length : ‚àÄ k l (Œ∫ : ‚Ñï ‚Üí Œ±) ‚Üí bind (meta Œ±) (sort/clocked k l) (Œ∫ ‚àò length) ‚â° Œ∫ (length l)
  sort/clocked/length {_} zero    l Œ∫ = refl
  sort/clocked/length {Œ±} (suc k) l Œ∫ =
    begin
      bnd (sort/clocked (suc k) l) (Œ∫ ‚àò length)
    ‚â°‚ü®‚ü©
      bnd (split l) (Œª (l‚ÇÅ , l‚ÇÇ) ‚Üí bnd (sort/clocked k l‚ÇÅ) (Œª l‚ÇÅ' ‚Üí bnd (sort/clocked k l‚ÇÇ) (Œª l‚ÇÇ' ‚Üí bnd (merge (l‚ÇÅ' , l‚ÇÇ')) (Œ∫ ‚àò length))))
    ‚â°‚ü® Eq.cong (bnd (split l)) (funext Œª (l‚ÇÅ , l‚ÇÇ) ‚Üí Eq.cong (bnd (sort/clocked k l‚ÇÅ)) (funext Œª l‚ÇÅ' ‚Üí Eq.cong (bnd (sort/clocked k l‚ÇÇ)) (funext Œª l‚ÇÇ' ‚Üí merge/length l‚ÇÅ' l‚ÇÇ' Œ∫))) ‚ü©
      bnd (split l) (Œª (l‚ÇÅ , l‚ÇÇ) ‚Üí bnd (sort/clocked k l‚ÇÅ) (Œª l‚ÇÅ' ‚Üí bnd (sort/clocked k l‚ÇÇ) (Œª l‚ÇÇ' ‚Üí Œ∫ (length l‚ÇÅ' + length l‚ÇÇ'))))
    ‚â°‚ü® Eq.cong (bnd (split l)) (funext Œª (l‚ÇÅ , l‚ÇÇ) ‚Üí Eq.cong (bnd (sort/clocked k l‚ÇÅ)) (funext Œª l‚ÇÅ' ‚Üí sort/clocked/length k l‚ÇÇ (Œª n‚ÇÇ ‚Üí Œ∫ (length l‚ÇÅ' + n‚ÇÇ)))) ‚ü©
      bnd (split l) (Œª (l‚ÇÅ , l‚ÇÇ) ‚Üí bnd (sort/clocked k l‚ÇÅ) (Œª l‚ÇÅ' ‚Üí Œ∫ (length l‚ÇÅ' + length l‚ÇÇ)))
    ‚â°‚ü® Eq.cong (bnd (split l)) (funext Œª (l‚ÇÅ , l‚ÇÇ) ‚Üí sort/clocked/length k l‚ÇÅ (Œª n‚ÇÅ ‚Üí Œ∫ (n‚ÇÅ + length l‚ÇÇ))) ‚ü©
      bnd (split l) (Œª (l‚ÇÅ , l‚ÇÇ) ‚Üí Œ∫ (length l‚ÇÅ + length l‚ÇÇ))
    ‚â°‚ü® split/length l (Œª n‚ÇÅ n‚ÇÇ ‚Üí Œ∫ (n‚ÇÅ + n‚ÇÇ)) ‚ü©
      Œ∫ (‚åä length l /2‚åã + ‚åà length l /2‚åâ )
    ‚â°‚ü® Eq.cong Œ∫ (N.‚åän/2‚åã+‚åàn/2‚åâ‚â°n (length l)) ‚ü©
      Œ∫ (length l)
    ‚àé
    where
      open ‚â°-Reasoning

      bnd : ‚àÄ {A} ‚Üí cmp (F A) ‚Üí (val A ‚Üí Œ±) ‚Üí Œ±
      bnd = bind (meta Œ±)

  sort/recurrence : ‚Ñï ‚Üí ‚Ñï ‚Üí ‚Ñï
  sort/recurrence zero    n = zero
  sort/recurrence (suc k) n = sort/recurrence k ‚åä n /2‚åã + sort/recurrence k ‚åà n /2‚åâ + n

  sort/clocked/cost : cmp (Œ† (U (meta ‚Ñï)) Œª _ ‚Üí Œ† (list A) Œª _ ‚Üí cost)
  sort/clocked/cost k l = sort/recurrence k (length l)

  sort/clocked‚â§sort/clocked/cost : ‚àÄ k l ‚Üí ub (list A) (sort/clocked k l) (sort/clocked/cost k l)
  sort/clocked‚â§sort/clocked/cost zero l = ub/ret _
  sort/clocked‚â§sort/clocked/cost (suc k) l =
    Eq.subst (ub _ _) (Eq.sym (N.+-assoc (sort/recurrence k ‚åä length l /2‚åã) _ _)) (
      Eq.subst (ub _ _) (Eq.cong (Œª n ‚Üí sort/recurrence k ‚åä length l /2‚åã + (sort/recurrence k ‚åà length l /2‚åâ + n)) (N.‚åän/2‚åã+‚åàn/2‚åâ‚â°n _)) (
        Eq.subst (ub _ _) (split/length l (Œª n‚ÇÅ n‚ÇÇ ‚Üí sort/recurrence k n‚ÇÅ + (sort/recurrence k n‚ÇÇ + (n‚ÇÅ + n‚ÇÇ)))) (
          ub/bind _ _ (split‚â§split/cost l) Œª (l‚ÇÅ , l‚ÇÇ) ‚Üí
            Eq.subst (ub _ _) (sort/clocked/length k l‚ÇÅ (Œª n‚ÇÅ ‚Üí sort/recurrence k _ + (sort/recurrence k _ + (n‚ÇÅ + _)))) (
              ub/bind _ _ (sort/clocked‚â§sort/clocked/cost k l‚ÇÅ) Œª l‚ÇÅ' ‚Üí
                Eq.subst (ub _ _) (sort/clocked/length k l‚ÇÇ Œª n‚ÇÇ ‚Üí sort/recurrence k _ + (_ + n‚ÇÇ)) (
                  ub/bind (sort/recurrence k _) _ (sort/clocked‚â§sort/clocked/cost k l‚ÇÇ) Œª l‚ÇÇ' ‚Üí
                    merge‚â§merge/cost (l‚ÇÅ' , l‚ÇÇ')
                )
            )
        )
      )
    )

  sort/depth : cmp (Œ† (list A) Œª _ ‚Üí meta ‚Ñï)
  sort/depth l = ‚åàlog‚ÇÇ length l ‚åâ

  sort : cmp (Œ† (list A) Œª _ ‚Üí F (list A))
  sort l = sort/clocked (sort/depth l) l

  sort/correct : IsSort sort
  sort/correct l = sort/clocked/correct (sort/depth l) l N.‚â§-refl

  sort/cost : cmp (Œ† (list A) Œª _ ‚Üí cost)
  sort/cost l = sort/clocked/cost (sort/depth l) l

  sort‚â§sort/cost : ‚àÄ l ‚Üí ub (list A) (sort l) (sort/cost l)
  sort‚â§sort/cost l = sort/clocked‚â§sort/clocked/cost (sort/depth l) l

module Ex/MergeSort where
  module Sort = MergeSort NatComparable

  list' = list (U (meta ‚Ñï))

  ex/split : cmp (F Sort.pair)
  ex/split = Sort.split (6 ‚à∑ 2 ‚à∑ 8 ‚à∑ 3 ‚à∑ 1 ‚à∑ 8 ‚à∑ 5 ‚à∑ [])

  ex/merge : cmp (F list')
  ex/merge = Sort.merge (2 ‚à∑ 3 ‚à∑ 6 ‚à∑ 8 ‚à∑ [] , 1 ‚à∑ 5 ‚à∑ 8 ‚à∑ [])

  ex/sort : cmp (F list')
  ex/sort = Sort.sort (1 ‚à∑ 5 ‚à∑ 3 ‚à∑ 1 ‚à∑ 2 ‚à∑ [])

  ex/sort/forward : cmp (F list')
  ex/sort/forward = Sort.sort test/forward  -- cost: 32

  ex/sort/backward : cmp (F list')
  ex/sort/backward = Sort.sort test/backward  -- cost: 32

  ex/sort/shuffled : cmp (F list')
  ex/sort/shuffled = Sort.sort test/shuffled  -- cost: 47

module SortEquivalence (M : Comparable) where
  open Comparable M
  open Core M

  module ISort = InsertionSort M
  module MSort = MergeSort M

  isort‚â°msort : ‚óØ (ISort.sort ‚â° MSort.sort)
  isort‚â°msort u =
    funext Œª l ‚Üí
      let (l'·µ¢ , ‚â°·µ¢ , ‚Ü≠·µ¢ , sorted·µ¢) = ISort.sort/correct l u in
      let (l'‚Çò , ‚â°‚Çò , ‚Ü≠‚Çò , sorted‚Çò) = MSort.sort/correct l u in
      begin
        ISort.sort l
      ‚â°‚ü® ‚â°·µ¢ ‚ü©
        ret l'·µ¢
      ‚â°‚ü® Eq.cong ret (unique-sorted sorted·µ¢ sorted‚Çò (trans (‚Ü≠-sym ‚Ü≠·µ¢) ‚Ü≠‚Çò)) ‚ü©
        ret l'‚Çò
      ‚â°‚ü® Eq.sym ‚â°‚Çò ‚ü©
        MSort.sort l
      ‚àé
        where open ‚â°-Reasoning
